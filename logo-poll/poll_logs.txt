2025-08-12 23:04:41,215 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:04:42,262 - INFO - Fetched 7 comments from issue #35
2025-08-12 23:04:42,263 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:04:42,263 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:04:42,263 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:04:42,263 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:04:42,263 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:04:42,263 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:04:42,263 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:04:43,797 - INFO - Updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:09:22,024 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:09:23,351 - INFO - Fetched 7 comments from issue #35
2025-08-12 23:09:23,352 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:09:23,352 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:09:23,352 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:09:23,352 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:09:23,352 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:09:23,352 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:09:23,352 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:09:24,785 - INFO - Updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:13:48,912 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:13:50,310 - INFO - Fetched 8 comments from issue #35
2025-08-12 23:13:50,311 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:13:50,311 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:13:50,311 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:13:50,311 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:13:50,311 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:13:50,311 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:13:50,312 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:13:50,312 - WARNING - Invalid vote format in comment by fredvs: BlaBla
2025-08-12 23:13:52,051 - INFO - Updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:15:20,885 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:15:21,856 - INFO - Fetched 9 comments from issue #35
2025-08-12 23:15:21,857 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:15:21,857 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:15:21,857 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:15:21,857 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:15:21,857 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:15:21,857 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:15:21,857 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:15:21,858 - WARNING - Invalid vote format in comment by fredvs: BlaBla
2025-08-12 23:15:21,858 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:15:23,597 - INFO - Updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:17:04,730 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:17:05,895 - INFO - Fetched 9 comments from issue #35
2025-08-12 23:17:05,895 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:17:05,896 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:17:05,896 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:17:05,896 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:17:05,896 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:17:05,896 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:17:05,896 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:17:05,896 - WARNING - Invalid vote format in comment by fredvs: BlaBla
2025-08-12 23:17:05,896 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:17:06,844 - INFO - Created results issue: https://github.com/fredvs/test/issues/39
2025-08-12 23:17:06,844 - INFO - Set RESULTS_ISSUE_NUMBER = 39 in create_poll_issue_xlibre.py
2025-08-12 23:22:52,249 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:22:53,338 - INFO - Fetched 9 comments from issue #35
2025-08-12 23:22:53,338 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:22:53,338 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:22:53,338 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:22:53,338 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:22:53,338 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:22:53,338 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:22:53,338 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:22:53,338 - WARNING - Invalid vote format in comment by fredvs: BlaBla
2025-08-12 23:22:53,338 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:22:53,339 - INFO - Attempting to update issue #36
2025-08-12 23:22:53,849 - INFO - Issue #36 state: open, locked: False
2025-08-12 23:22:54,771 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:27:58,187 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:27:59,411 - INFO - Fetched 8 comments from issue #35
2025-08-12 23:27:59,412 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:27:59,412 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:27:59,412 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:27:59,412 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:27:59,412 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:27:59,412 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:27:59,412 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:27:59,412 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:27:59,412 - INFO - Attempting to update issue #36
2025-08-12 23:27:59,923 - INFO - Issue #36 state: open, locked: False
2025-08-12 23:28:00,743 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:28:25,757 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:28:26,854 - INFO - Fetched 8 comments from issue #35
2025-08-12 23:28:26,855 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:28:26,855 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:28:26,855 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:28:26,855 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:28:26,855 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:28:26,855 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:28:26,855 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:28:26,855 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:28:26,856 - INFO - Attempting to update issue #36
2025-08-12 23:28:27,469 - INFO - Issue #36 state: open, locked: False
2025-08-12 23:28:28,594 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:29:15,220 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:29:16,314 - INFO - Fetched 9 comments from issue #35
2025-08-12 23:29:16,315 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:29:16,315 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:29:16,315 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:29:16,315 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:29:16,315 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:29:16,315 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:29:16,315 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:29:16,316 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:29:16,316 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-12 23:29:16,316 - INFO - Attempting to update issue #36
2025-08-12 23:29:17,133 - INFO - Issue #36 state: open, locked: False
2025-08-12 23:29:18,567 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:32:40,961 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:32:42,342 - INFO - Fetched 9 comments from issue #35
2025-08-12 23:32:42,342 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:32:42,342 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:32:42,342 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:32:42,342 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:32:42,342 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:32:42,342 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:32:42,342 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:32:42,342 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:32:42,342 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-12 23:32:42,343 - INFO - Attempting to update issue #36
2025-08-12 23:32:42,854 - INFO - Issue #36 state: open, locked: False
2025-08-12 23:32:43,980 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36
2025-08-12 23:38:05,472 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:38:06,643 - INFO - Fetched 9 comments from issue #35
2025-08-12 23:38:06,643 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:38:06,643 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:38:06,643 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:38:06,643 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:38:06,643 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:38:06,643 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:38:06,643 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:38:06,643 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:38:06,643 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-12 23:38:06,643 - INFO - Generating results with timestamp: 2025-08-12 21:38:06 UTC
2025-08-12 23:38:06,643 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 21:38:06 UTC
2025-08-12 23:38:07,360 - INFO - Issue #36 state: open, locked: False
2025-08-12 23:38:08,114 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 21:38:06 UTC
2025-08-12 23:39:15,307 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-12 23:39:16,379 - INFO - Fetched 9 comments from issue #35
2025-08-12 23:39:16,380 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-12 23:39:16,382 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-12 23:39:16,382 - INFO - Counted vote for Logo 102 by fredvs
2025-08-12 23:39:16,382 - INFO - Counted vote for Logo 78 by fredvs
2025-08-12 23:39:16,382 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-12 23:39:16,382 - INFO - Counted vote for Logo 100 by fredvs
2025-08-12 23:39:16,382 - WARNING - Invalid logo number 130 by fredvs
2025-08-12 23:39:16,382 - WARNING - Invalid logo number 138 by fredvs
2025-08-12 23:39:16,382 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-12 23:39:16,382 - INFO - Generating results with timestamp: 2025-08-12 21:39:16 UTC
2025-08-12 23:39:16,383 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 21:39:16 UTC
2025-08-12 23:39:16,892 - INFO - Issue #36 state: open, locked: False
2025-08-12 23:39:17,813 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 21:39:16 UTC
2025-08-13 00:01:33,863 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:01:35,263 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:01:35,264 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:01:35,264 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:01:35,264 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:01:35,264 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:01:35,264 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:01:35,264 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:01:35,264 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:01:35,264 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:01:35,264 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:01:35,264 - INFO - Generating results with timestamp: 2025-08-12 22:01:35 UTC
2025-08-13 00:01:35,264 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:01:35 UTC
2025-08-13 00:01:35,776 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:01:36,800 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:01:35 UTC
2025-08-13 00:01:59,409 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:02:00,455 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:02:00,455 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:02:00,456 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:02:00,456 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:02:00,456 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:02:00,456 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:02:00,456 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:02:00,456 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:02:00,456 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:02:00,456 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:02:00,457 - INFO - Generating results with timestamp: 2025-08-12 22:02:00 UTC
2025-08-13 00:02:00,457 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:02:00 UTC
2025-08-13 00:02:00,966 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:02:01,848 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:02:00 UTC
2025-08-13 00:45:03,236 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:45:04,216 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:45:04,217 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:45:04,217 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:45:04,217 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:45:04,217 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:45:04,217 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:45:04,217 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:45:04,217 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:45:04,217 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:45:04,217 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:45:04,218 - INFO - Generating results with timestamp: 2025-08-12 22:45:04 UTC
2025-08-13 00:45:04,218 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:45:04 UTC
2025-08-13 00:45:04,728 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:45:05,547 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:45:04 UTC
2025-08-13 00:46:13,835 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:46:14,764 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:46:14,765 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:46:14,767 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:46:14,767 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:46:14,767 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:46:14,767 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:46:14,767 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:46:14,767 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:46:14,767 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:46:14,767 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:46:14,767 - INFO - Generating results with timestamp: 2025-08-12 22:46:14 UTC
2025-08-13 00:46:14,767 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:46:14 UTC
2025-08-13 00:46:15,380 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:46:16,199 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:46:14 UTC
2025-08-13 00:50:49,497 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:50:50,822 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:50:50,823 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:50:50,823 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:50:50,823 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:50:50,823 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:50:50,823 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:50:50,823 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:50:50,823 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:50:50,823 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:50:50,823 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:50:50,824 - INFO - Generating results with timestamp: 2025-08-12 22:50:50 UTC
2025-08-13 00:50:50,824 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:50:50 UTC
2025-08-13 00:50:51,333 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:50:52,255 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:50:50 UTC
2025-08-13 00:52:26,071 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:52:27,585 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:52:27,586 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:52:27,586 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:52:27,586 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:52:27,586 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:52:27,586 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:52:27,586 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:52:27,586 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:52:27,586 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:52:27,587 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:52:27,587 - INFO - Generating results with timestamp: 2025-08-12 22:52:27 UTC
2025-08-13 00:52:27,587 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:52:27 UTC
2025-08-13 00:52:28,200 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:52:29,121 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:52:27 UTC
2025-08-13 00:54:00,210 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:54:01,586 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:54:01,586 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:54:01,586 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:54:01,587 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:54:01,587 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:54:01,587 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:54:01,587 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:54:01,587 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:54:01,587 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:54:01,587 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:54:01,587 - INFO - Generating results with timestamp: 2025-08-12 22:54:01 UTC
2025-08-13 00:54:01,587 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:54:01 UTC
2025-08-13 00:54:02,200 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:54:03,121 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:54:01 UTC
2025-08-13 00:54:45,076 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:54:46,539 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:54:46,540 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:54:46,540 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:54:46,540 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:54:46,540 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:54:46,540 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:54:46,541 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:54:46,541 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:54:46,541 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:54:46,541 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:54:46,541 - INFO - Generating results with timestamp: 2025-08-12 22:54:46 UTC
2025-08-13 00:54:46,541 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:54:46 UTC
2025-08-13 00:54:47,049 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:54:47,973 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:54:46 UTC
2025-08-13 00:55:57,405 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:55:58,523 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:55:58,524 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:55:58,524 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:55:58,524 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:55:58,524 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:55:58,524 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:55:58,524 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:55:58,524 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:55:58,525 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:55:58,525 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:55:58,525 - INFO - Generating results with timestamp: 2025-08-12 22:55:58 UTC
2025-08-13 00:55:58,525 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:55:58 UTC
2025-08-13 00:55:59,035 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:55:59,855 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:55:58 UTC
2025-08-13 00:58:02,069 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 00:58:03,142 - INFO - Fetched 9 comments from issue #35
2025-08-13 00:58:03,143 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 00:58:03,143 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 00:58:03,144 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 00:58:03,144 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 00:58:03,144 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 00:58:03,144 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 00:58:03,144 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 00:58:03,144 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 00:58:03,144 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 00:58:03,144 - INFO - Generating results with timestamp: 2025-08-12 22:58:03 UTC
2025-08-13 00:58:03,144 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 22:58:03 UTC
2025-08-13 00:58:03,653 - INFO - Issue #36 state: open, locked: False
2025-08-13 00:58:04,370 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 22:58:03 UTC
2025-08-13 01:27:31,514 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 01:27:32,494 - INFO - Fetched 9 comments from issue #35
2025-08-13 01:27:32,494 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 01:27:32,495 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 01:27:32,495 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 01:27:32,495 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 01:27:32,495 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 01:27:32,495 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 01:27:32,495 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 01:27:32,495 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 01:27:32,495 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 01:27:32,495 - INFO - Generating results with timestamp: 2025-08-12 23:27:32 UTC
2025-08-13 01:27:32,496 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 23:27:32 UTC
2025-08-13 01:27:33,006 - INFO - Issue #36 state: open, locked: False
2025-08-13 01:27:33,826 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 23:27:32 UTC
2025-08-13 01:29:23,107 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 01:29:24,418 - INFO - Fetched 9 comments from issue #35
2025-08-13 01:29:24,418 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 01:29:24,418 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 01:29:24,418 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 01:29:24,419 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 01:29:24,419 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 01:29:24,419 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 01:29:24,419 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 01:29:24,419 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 01:29:24,419 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 01:29:24,419 - INFO - Generating results with timestamp: 2025-08-12 23:29:24 UTC
2025-08-13 01:29:24,419 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 23:29:24 UTC
2025-08-13 01:29:25,236 - INFO - Issue #36 state: open, locked: False
2025-08-13 01:29:26,056 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 23:29:24 UTC
2025-08-13 01:36:46,677 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 01:36:48,321 - INFO - Fetched 9 comments from issue #35
2025-08-13 01:36:48,322 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 01:36:48,322 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 01:36:48,322 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 01:36:48,322 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 01:36:48,322 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 01:36:48,322 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 01:36:48,322 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 01:36:48,322 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 01:36:48,322 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 01:36:48,323 - INFO - Generating results with timestamp: 2025-08-12 23:36:48 UTC
2025-08-13 01:36:48,323 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 23:36:48 UTC
2025-08-13 01:36:48,935 - INFO - Issue #36 state: open, locked: False
2025-08-13 01:36:49,856 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 23:36:48 UTC
2025-08-13 01:37:55,165 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 01:37:56,110 - INFO - Fetched 9 comments from issue #35
2025-08-13 01:37:56,110 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 01:37:56,112 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 01:37:56,112 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 01:37:56,112 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 01:37:56,112 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 01:37:56,112 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 01:37:56,112 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 01:37:56,112 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 01:37:56,112 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 01:37:56,113 - INFO - Generating results with timestamp: 2025-08-12 23:37:56 UTC
2025-08-13 01:37:56,113 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 23:37:56 UTC
2025-08-13 01:37:56,622 - INFO - Issue #36 state: open, locked: False
2025-08-13 01:37:57,441 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 23:37:56 UTC
2025-08-13 01:39:16,930 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 01:39:18,337 - INFO - Fetched 9 comments from issue #35
2025-08-13 01:39:18,338 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 01:39:18,338 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 01:39:18,338 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 01:39:18,338 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 01:39:18,338 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 01:39:18,338 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 01:39:18,338 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 01:39:18,338 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 01:39:18,338 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 01:39:18,339 - INFO - Generating results with timestamp: 2025-08-12 23:39:18 UTC
2025-08-13 01:39:18,339 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 23:39:18 UTC
2025-08-13 01:39:18,848 - INFO - Issue #36 state: open, locked: False
2025-08-13 01:39:19,770 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 23:39:18 UTC
2025-08-13 01:40:12,367 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 01:40:13,633 - INFO - Fetched 9 comments from issue #35
2025-08-13 01:40:13,634 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 01:40:13,634 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 01:40:13,634 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 01:40:13,634 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 01:40:13,634 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 01:40:13,634 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 01:40:13,635 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 01:40:13,635 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 01:40:13,635 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 01:40:13,635 - INFO - Generating results with timestamp: 2025-08-12 23:40:13 UTC
2025-08-13 01:40:13,635 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 23:40:13 UTC
2025-08-13 01:40:14,145 - INFO - Issue #36 state: open, locked: False
2025-08-13 01:40:15,067 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 23:40:13 UTC
2025-08-13 01:40:59,494 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 01:41:00,736 - INFO - Fetched 9 comments from issue #35
2025-08-13 01:41:00,736 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 01:41:00,746 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 01:41:00,746 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 01:41:00,746 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 01:41:00,746 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 01:41:00,746 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 01:41:00,746 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 01:41:00,747 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 01:41:00,747 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 01:41:00,747 - INFO - Generating results with timestamp: 2025-08-12 23:41:00 UTC
2025-08-13 01:41:00,747 - INFO - Attempting to update issue #36 with timestamp: 2025-08-12 23:41:00 UTC
2025-08-13 01:41:01,248 - INFO - Issue #36 state: open, locked: False
2025-08-13 01:41:02,170 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-12 23:41:00 UTC
2025-08-13 03:49:33,459 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 03:49:34,989 - INFO - Fetched 9 comments from issue #35
2025-08-13 03:49:34,989 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 03:49:34,989 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 03:49:34,989 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 03:49:34,989 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 03:49:34,989 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 03:49:34,989 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 03:49:34,990 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 03:49:34,990 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 03:49:34,990 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 03:49:34,990 - INFO - Generating results with timestamp: 2025-08-13 01:49:34 UTC
2025-08-13 03:49:34,990 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 01:49:34 UTC
2025-08-13 03:49:35,436 - INFO - Issue #36 state: open, locked: False
2025-08-13 03:49:36,287 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 01:49:34 UTC
2025-08-13 04:03:17,512 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:03:18,560 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:03:18,560 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:03:18,560 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:03:18,560 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:03:18,560 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:03:18,561 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:03:18,561 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:03:18,561 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:03:18,561 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:03:18,561 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:03:18,561 - INFO - Generating results with timestamp: 2025-08-13 02:03:18 UTC
2025-08-13 04:03:18,561 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:03:18 UTC
2025-08-13 04:03:19,482 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:03:20,301 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:03:18 UTC
2025-08-13 04:05:21,011 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:05:22,057 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:05:22,058 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:05:22,058 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:05:22,058 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:05:22,058 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:05:22,058 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:05:22,058 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:05:22,058 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:05:22,059 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:05:22,059 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:05:22,059 - INFO - Generating results with timestamp: 2025-08-13 02:05:22 UTC
2025-08-13 04:05:22,059 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:05:22 UTC
2025-08-13 04:05:22,568 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:05:23,592 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:05:22 UTC
2025-08-13 04:07:55,348 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:07:56,986 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:07:56,988 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:07:56,988 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:07:56,988 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:07:56,988 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:07:56,988 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:07:56,988 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:07:56,988 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:07:56,988 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:07:56,988 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:07:56,989 - INFO - Generating results with timestamp: 2025-08-13 02:07:56 UTC
2025-08-13 04:07:56,989 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:07:56 UTC
2025-08-13 04:07:57,804 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:07:58,517 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:07:56 UTC
2025-08-13 04:12:01,675 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:12:03,049 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:12:03,050 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:12:03,050 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:12:03,050 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:12:03,050 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:12:03,050 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:12:03,050 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:12:03,050 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:12:03,050 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:12:03,051 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:12:03,051 - INFO - Generating results with timestamp: 2025-08-13 02:12:03 UTC
2025-08-13 04:12:03,051 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:12:03 UTC
2025-08-13 04:12:03,560 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:12:04,284 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:12:03 UTC
2025-08-13 04:14:01,556 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:14:02,652 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:14:02,652 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:14:02,653 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:14:02,653 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:14:02,653 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:14:02,653 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:14:02,653 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:14:02,653 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:14:02,653 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:14:02,653 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:14:02,653 - INFO - Generating results with timestamp: 2025-08-13 02:14:02 UTC
2025-08-13 04:14:02,654 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:14:02 UTC
2025-08-13 04:14:03,162 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:14:03,982 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:14:02 UTC
2025-08-13 04:16:01,290 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:16:02,663 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:16:02,664 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:16:02,664 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:16:02,664 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:16:02,665 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:16:02,665 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:16:02,665 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:16:02,665 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:16:02,665 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:16:02,665 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:16:02,665 - INFO - Generating results with timestamp: 2025-08-13 02:16:02 UTC
2025-08-13 04:16:02,665 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:16:02 UTC
2025-08-13 04:16:03,168 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:16:03,995 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:16:02 UTC
2025-08-13 04:18:01,143 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:18:02,063 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:18:02,064 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:18:02,064 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:18:02,064 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:18:02,064 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:18:02,064 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:18:02,064 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:18:02,064 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:18:02,065 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:18:02,065 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:18:02,065 - INFO - Generating results with timestamp: 2025-08-13 02:18:02 UTC
2025-08-13 04:18:02,065 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:18:02 UTC
2025-08-13 04:18:02,574 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:18:03,599 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:18:02 UTC
2025-08-13 04:20:01,740 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:20:02,635 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:20:02,636 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:20:02,636 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:20:02,636 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:20:02,636 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:20:02,636 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:20:02,636 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:20:02,636 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:20:02,636 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:20:02,636 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:20:02,636 - INFO - Generating results with timestamp: 2025-08-13 02:20:02 UTC
2025-08-13 04:20:02,636 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:20:02 UTC
2025-08-13 04:20:03,073 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:20:03,757 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:20:02 UTC
2025-08-13 04:30:01,894 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:30:02,962 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:30:02,963 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:30:02,963 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:30:02,963 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:30:02,963 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:30:02,963 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:30:02,963 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:30:02,963 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:30:02,964 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:30:02,964 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:30:02,964 - INFO - Generating results with timestamp: 2025-08-13 02:30:02 UTC
2025-08-13 04:30:02,964 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:30:02 UTC
2025-08-13 04:30:03,474 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:30:04,294 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:30:02 UTC
2025-08-13 04:38:01,416 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:38:02,507 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:38:02,508 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:38:02,508 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:38:02,508 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:38:02,508 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:38:02,508 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:38:02,508 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:38:02,509 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:38:02,509 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:38:02,509 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:38:02,509 - INFO - Generating results with timestamp: 2025-08-13 02:38:02 UTC
2025-08-13 04:38:02,509 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:38:02 UTC
2025-08-13 04:38:03,019 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:38:03,941 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:38:02 UTC
2025-08-13 04:38:04,032 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:38:05,477 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:38:05,478 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:38:05,478 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:38:05,478 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:38:05,478 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:38:05,478 - INFO - Generating results with timestamp: 2025-08-13 02:38:05 UTC
2025-08-13 04:38:05,478 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:38:05 UTC
2025-08-13 04:38:05,989 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:38:07,014 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:38:05 UTC
2025-08-13 04:38:07,108 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:38:08,242 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:38:08,243 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:38:08,243 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:38:08,243 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:38:08,243 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:38:08,243 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:38:08,244 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:38:08,244 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:38:08,244 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:38:08,244 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:38:08,244 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:38:08,244 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:38:08,244 - INFO - Generating results with timestamp: 2025-08-13 02:38:08 UTC
2025-08-13 04:38:08,244 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:38:08 UTC
2025-08-13 04:38:08,754 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:38:09,720 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:38:08 UTC
2025-08-13 04:39:01,823 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:39:03,231 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:39:03,231 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:39:03,232 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:39:03,232 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:39:03,232 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:39:03,232 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:39:03,232 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:39:03,232 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:39:03,232 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:39:03,232 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:39:03,232 - INFO - Generating results with timestamp: 2025-08-13 02:39:03 UTC
2025-08-13 04:39:03,232 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:39:03 UTC
2025-08-13 04:39:03,744 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:39:04,767 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:39:03 UTC
2025-08-13 04:39:04,860 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:39:05,792 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:39:05,793 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:39:05,793 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:39:05,793 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:39:05,793 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:39:05,793 - INFO - Generating results with timestamp: 2025-08-13 02:39:05 UTC
2025-08-13 04:39:05,793 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:39:05 UTC
2025-08-13 04:39:06,303 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:39:07,224 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:39:05 UTC
2025-08-13 04:39:07,320 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:39:08,454 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:39:08,455 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:39:08,455 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:39:08,455 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:39:08,455 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:39:08,455 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:39:08,456 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:39:08,456 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:39:08,456 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:39:08,456 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:39:08,456 - INFO - Generating results with timestamp: 2025-08-13 02:39:08 UTC
2025-08-13 04:39:08,456 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:39:08 UTC
2025-08-13 04:39:08,967 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:39:10,093 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:39:08 UTC
2025-08-13 04:40:01,250 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:40:02,829 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:40:02,830 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:40:02,830 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:40:02,830 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:40:02,830 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:40:02,830 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:40:02,830 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:40:02,830 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:40:02,830 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:40:02,830 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:40:02,830 - INFO - Generating results with timestamp: 2025-08-13 02:40:02 UTC
2025-08-13 04:40:02,831 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:40:02 UTC
2025-08-13 04:40:03,339 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:40:04,159 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:40:02 UTC
2025-08-13 04:40:04,313 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:40:05,285 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:40:05,286 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:40:05,286 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:40:05,286 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:40:05,286 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:40:05,286 - INFO - Generating results with timestamp: 2025-08-13 02:40:05 UTC
2025-08-13 04:40:05,286 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:40:05 UTC
2025-08-13 04:40:05,797 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:40:06,822 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:40:05 UTC
2025-08-13 04:40:06,961 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:40:08,358 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:40:08,359 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:40:08,359 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:40:08,359 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:40:08,359 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:40:08,359 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:40:08,360 - INFO - Generating results with timestamp: 2025-08-13 02:40:08 UTC
2025-08-13 04:40:08,360 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:40:08 UTC
2025-08-13 04:40:08,973 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:40:09,914 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:40:08 UTC
2025-08-13 04:41:02,033 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:41:03,141 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:41:03,142 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:41:03,142 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:41:03,142 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:41:03,142 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:41:03,142 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:41:03,142 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:41:03,142 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:41:03,142 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:41:03,142 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:41:03,143 - INFO - Generating results with timestamp: 2025-08-13 02:41:03 UTC
2025-08-13 04:41:03,143 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:41:03 UTC
2025-08-13 04:41:03,654 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:41:04,780 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:41:03 UTC
2025-08-13 04:41:04,888 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:41:05,907 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:41:05,907 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:41:05,907 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:41:05,908 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:41:05,908 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:41:05,908 - INFO - Generating results with timestamp: 2025-08-13 02:41:05 UTC
2025-08-13 04:41:05,908 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:41:05 UTC
2025-08-13 04:41:06,419 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:41:07,238 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:41:05 UTC
2025-08-13 04:41:07,351 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:41:08,877 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:41:08,877 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:41:08,878 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:41:08,878 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:41:08,878 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:41:08,878 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:41:08,879 - INFO - Generating results with timestamp: 2025-08-13 02:41:08 UTC
2025-08-13 04:41:08,879 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:41:08 UTC
2025-08-13 04:41:09,389 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:41:10,517 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:41:08 UTC
2025-08-13 04:42:01,661 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:42:02,534 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:42:02,534 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:42:02,534 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:42:02,534 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:42:02,534 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:42:02,534 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:42:02,534 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:42:02,534 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:42:02,534 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:42:02,534 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:42:02,535 - INFO - Generating results with timestamp: 2025-08-13 02:42:02 UTC
2025-08-13 04:42:02,535 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:42:02 UTC
2025-08-13 04:42:03,046 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:42:03,967 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:42:02 UTC
2025-08-13 04:42:04,134 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:42:05,094 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:42:05,094 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:42:05,094 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:42:05,094 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:42:05,094 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:42:05,094 - INFO - Generating results with timestamp: 2025-08-13 02:42:05 UTC
2025-08-13 04:42:05,094 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:42:05 UTC
2025-08-13 04:42:05,810 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:42:06,835 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:42:05 UTC
2025-08-13 04:42:06,986 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:42:08,370 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:42:08,371 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:42:08,371 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:42:08,371 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:42:08,371 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:42:08,371 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:42:08,372 - INFO - Generating results with timestamp: 2025-08-13 02:42:08 UTC
2025-08-13 04:42:08,372 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:42:08 UTC
2025-08-13 04:42:08,884 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:42:10,318 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:42:08 UTC
2025-08-13 04:43:01,520 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:43:02,540 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:43:02,541 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:43:02,541 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:43:02,541 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:43:02,541 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:43:02,541 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:43:02,541 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:43:02,541 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:43:02,541 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:43:02,541 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:43:02,541 - INFO - Generating results with timestamp: 2025-08-13 02:43:02 UTC
2025-08-13 04:43:02,541 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:43:02 UTC
2025-08-13 04:43:03,052 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:43:03,816 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:43:02 UTC
2025-08-13 04:43:04,033 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:43:04,998 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:43:04,998 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:43:04,998 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:43:04,998 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:43:04,999 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:43:04,999 - INFO - Generating results with timestamp: 2025-08-13 02:43:04 UTC
2025-08-13 04:43:04,999 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:43:04 UTC
2025-08-13 04:43:05,509 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:43:06,431 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:43:04 UTC
2025-08-13 04:43:06,589 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:43:07,660 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:43:07,661 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:43:07,661 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:43:07,661 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:43:07,661 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:43:07,661 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:43:07,661 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:43:07,662 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:43:07,662 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:43:07,662 - INFO - Generating results with timestamp: 2025-08-13 02:43:07 UTC
2025-08-13 04:43:07,662 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:43:07 UTC
2025-08-13 04:43:08,173 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:43:09,063 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:43:07 UTC
2025-08-13 04:44:01,212 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:44:02,089 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:44:02,090 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:44:02,090 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:44:02,090 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:44:02,090 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:44:02,090 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:44:02,090 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:44:02,090 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:44:02,090 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:44:02,090 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:44:02,090 - INFO - Generating results with timestamp: 2025-08-13 02:44:02 UTC
2025-08-13 04:44:02,090 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:44:02 UTC
2025-08-13 04:44:02,554 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:44:03,301 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:44:02 UTC
2025-08-13 04:44:03,438 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:44:04,241 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:44:04,242 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:44:04,242 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:44:04,242 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:44:04,242 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:44:04,243 - INFO - Generating results with timestamp: 2025-08-13 02:44:04 UTC
2025-08-13 04:44:04,243 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:44:04 UTC
2025-08-13 04:44:04,698 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:44:05,463 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:44:04 UTC
2025-08-13 04:44:05,648 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:44:06,507 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:44:06,508 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:44:06,509 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:44:06,509 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:44:06,509 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:44:06,509 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:44:06,510 - INFO - Generating results with timestamp: 2025-08-13 02:44:06 UTC
2025-08-13 04:44:06,510 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:44:06 UTC
2025-08-13 04:44:06,950 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:44:07,984 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:44:06 UTC
2025-08-13 04:45:01,210 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:45:02,245 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:45:02,246 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:45:02,246 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:45:02,246 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:45:02,246 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:45:02,246 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:45:02,246 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:45:02,246 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:45:02,246 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:45:02,246 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:45:02,246 - INFO - Generating results with timestamp: 2025-08-13 02:45:02 UTC
2025-08-13 04:45:02,246 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:45:02 UTC
2025-08-13 04:45:03,168 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:45:03,987 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:45:02 UTC
2025-08-13 04:45:04,226 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:45:05,221 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:45:05,221 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:45:05,221 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:45:05,221 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:45:05,221 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:45:05,222 - INFO - Generating results with timestamp: 2025-08-13 02:45:05 UTC
2025-08-13 04:45:05,222 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:45:05 UTC
2025-08-13 04:45:05,728 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:45:06,649 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:45:05 UTC
2025-08-13 04:45:06,872 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:45:07,980 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:45:07,981 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:45:07,981 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:45:07,981 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:45:07,981 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:45:07,981 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:45:07,981 - INFO - Generating results with timestamp: 2025-08-13 02:45:07 UTC
2025-08-13 04:45:07,982 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:45:07 UTC
2025-08-13 04:45:08,493 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:45:09,927 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:45:07 UTC
2025-08-13 04:46:02,149 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:46:03,276 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:46:03,277 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 04:46:03,277 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 04:46:03,277 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:46:03,277 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:46:03,277 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:46:03,277 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:46:03,277 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:46:03,277 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:46:03,277 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:46:03,277 - INFO - Generating results with timestamp: 2025-08-13 02:46:03 UTC
2025-08-13 04:46:03,277 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:46:03 UTC
2025-08-13 04:46:03,788 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:46:04,607 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:46:03 UTC
2025-08-13 04:46:04,778 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:46:05,836 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:46:05,837 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:46:05,837 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:46:05,837 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:46:05,837 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:46:05,837 - INFO - Generating results with timestamp: 2025-08-13 02:46:05 UTC
2025-08-13 04:46:05,837 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:46:05 UTC
2025-08-13 04:46:06,451 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:46:07,270 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:46:05 UTC
2025-08-13 04:46:07,473 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:46:08,498 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:46:08,499 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:46:08,499 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:46:08,499 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:46:08,499 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:46:08,499 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:46:08,499 - INFO - Generating results with timestamp: 2025-08-13 02:46:08 UTC
2025-08-13 04:46:08,499 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:46:08 UTC
2025-08-13 04:46:09,012 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:46:10,343 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:46:08 UTC
2025-08-13 04:46:31,011 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:46:32,051 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:46:32,051 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:46:32,051 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:46:32,051 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:46:32,051 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:46:32,051 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:46:32,051 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:46:32,051 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:46:32,051 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:46:32,051 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:46:32,052 - INFO - Generating results with timestamp: 2025-08-13 02:46:32 UTC
2025-08-13 04:46:32,052 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:46:32 UTC
2025-08-13 04:46:32,563 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:46:33,485 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:46:32 UTC
2025-08-13 04:47:01,509 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:47:02,464 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:47:02,465 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:47:02,475 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:47:02,475 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:47:02,475 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:47:02,475 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:47:02,475 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:47:02,475 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:47:02,475 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:47:02,475 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:47:02,476 - INFO - Generating results with timestamp: 2025-08-13 02:47:02 UTC
2025-08-13 04:47:02,476 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:47:02 UTC
2025-08-13 04:47:03,079 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:47:03,694 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:47:02 UTC
2025-08-13 04:47:03,844 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:47:04,820 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:47:04,821 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:47:04,821 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:47:04,821 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:47:04,821 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:47:04,822 - INFO - Generating results with timestamp: 2025-08-13 02:47:04 UTC
2025-08-13 04:47:04,822 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:47:04 UTC
2025-08-13 04:47:05,331 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:47:06,253 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:47:04 UTC
2025-08-13 04:47:06,389 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:47:07,789 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:47:07,789 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:47:07,791 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:47:07,791 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:47:07,791 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:47:07,791 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:47:07,791 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:47:07,791 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:47:07,791 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:47:07,791 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:47:07,791 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:47:07,791 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:47:07,792 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:47:07,792 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:47:07,792 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:47:07,792 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:47:07,792 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:47:07,792 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:47:07,792 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:47:07,792 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:47:07,792 - INFO - Generating results with timestamp: 2025-08-13 02:47:07 UTC
2025-08-13 04:47:07,792 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:47:07 UTC
2025-08-13 04:47:08,508 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:47:09,531 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:47:07 UTC
2025-08-13 04:48:01,656 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:48:02,574 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:48:02,575 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:48:02,575 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:48:02,575 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:48:02,575 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:48:02,575 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:48:02,575 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:48:02,575 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:48:02,575 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:48:02,575 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:48:02,576 - INFO - Generating results with timestamp: 2025-08-13 02:48:02 UTC
2025-08-13 04:48:02,576 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:48:02 UTC
2025-08-13 04:48:03,085 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:48:03,827 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:48:02 UTC
2025-08-13 04:48:03,948 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:48:04,929 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:48:04,930 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:48:04,930 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:48:04,930 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:48:04,930 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:48:04,930 - INFO - Generating results with timestamp: 2025-08-13 02:48:04 UTC
2025-08-13 04:48:04,930 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:48:04 UTC
2025-08-13 04:48:05,441 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:48:06,464 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:48:04 UTC
2025-08-13 04:48:06,572 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:48:08,000 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:48:08,001 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:48:08,001 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:48:08,001 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:48:08,001 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:48:08,001 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:48:08,001 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:48:08,002 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:48:08,002 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:48:08,002 - INFO - Generating results with timestamp: 2025-08-13 02:48:08 UTC
2025-08-13 04:48:08,003 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:48:08 UTC
2025-08-13 04:48:08,515 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:48:09,743 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:48:08 UTC
2025-08-13 04:49:01,872 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:49:02,887 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:49:02,887 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:49:02,887 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:49:02,887 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:49:02,887 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:49:02,888 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:49:02,888 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:49:02,888 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:49:02,888 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:49:02,888 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:49:02,888 - INFO - Generating results with timestamp: 2025-08-13 02:49:02 UTC
2025-08-13 04:49:02,888 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:49:02 UTC
2025-08-13 04:49:03,809 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:49:04,628 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:49:02 UTC
2025-08-13 04:49:04,738 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:49:05,652 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:49:05,652 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:49:05,652 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:49:05,652 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:49:05,652 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:49:05,653 - INFO - Generating results with timestamp: 2025-08-13 02:49:05 UTC
2025-08-13 04:49:05,653 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:49:05 UTC
2025-08-13 04:49:06,164 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:49:06,881 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:49:05 UTC
2025-08-13 04:49:06,995 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:49:08,109 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:49:08,109 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:49:08,109 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:49:08,109 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:49:08,110 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:49:08,110 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:49:08,110 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:49:08,110 - INFO - Generating results with timestamp: 2025-08-13 02:49:08 UTC
2025-08-13 04:49:08,110 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:49:08 UTC
2025-08-13 04:49:08,930 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:49:10,158 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:49:08 UTC
2025-08-13 04:50:01,292 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:50:02,480 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:50:02,481 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:50:02,481 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:50:02,481 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:50:02,481 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:50:02,481 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:50:02,481 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:50:02,481 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:50:02,481 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:50:02,481 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:50:02,481 - INFO - Generating results with timestamp: 2025-08-13 02:50:02 UTC
2025-08-13 04:50:02,481 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:50:02 UTC
2025-08-13 04:50:02,996 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:50:03,816 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:50:02 UTC
2025-08-13 04:50:03,914 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:50:04,840 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:50:04,841 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:50:04,841 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:50:04,841 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:50:04,841 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:50:04,841 - INFO - Generating results with timestamp: 2025-08-13 02:50:04 UTC
2025-08-13 04:50:04,841 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:50:04 UTC
2025-08-13 04:50:05,454 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:50:06,478 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:50:04 UTC
2025-08-13 04:50:06,581 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:50:07,604 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:50:07,605 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:50:07,605 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:50:07,605 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:50:07,605 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:50:07,605 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:50:07,605 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:50:07,605 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:50:07,606 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:50:07,606 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:50:07,606 - INFO - Generating results with timestamp: 2025-08-13 02:50:07 UTC
2025-08-13 04:50:07,606 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:50:07 UTC
2025-08-13 04:50:08,118 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:50:09,346 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:50:07 UTC
2025-08-13 04:51:01,456 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:51:02,697 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:51:02,698 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:51:02,698 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:51:02,698 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:51:02,698 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:51:02,698 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:51:02,698 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:51:02,698 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:51:02,698 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:51:02,698 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:51:02,698 - INFO - Generating results with timestamp: 2025-08-13 02:51:02 UTC
2025-08-13 04:51:02,699 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:51:02 UTC
2025-08-13 04:51:03,208 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:51:04,027 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:51:02 UTC
2025-08-13 04:51:04,129 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:51:05,153 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:51:05,154 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:51:05,154 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:51:05,154 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:51:05,154 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:51:05,154 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:51:05,154 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:51:05,154 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:51:05,154 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:51:05,154 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:51:05,154 - INFO - Generating results with timestamp: 2025-08-13 02:51:05 UTC
2025-08-13 04:51:05,155 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:51:05 UTC
2025-08-13 04:51:05,667 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:51:06,690 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:51:05 UTC
2025-08-13 04:51:06,792 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:51:08,226 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:51:08,226 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:51:08,249 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:51:08,249 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:51:08,249 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:51:08,249 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:51:08,250 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:51:08,250 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:51:08,251 - INFO - Generating results with timestamp: 2025-08-13 02:51:08 UTC
2025-08-13 04:51:08,251 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:51:08 UTC
2025-08-13 04:51:08,740 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:51:10,173 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:51:08 UTC
2025-08-13 04:51:51,654 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:51:53,077 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:51:53,078 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:51:53,078 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:51:53,078 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:51:53,078 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:51:53,078 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:51:53,078 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:51:53,078 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:51:53,078 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:51:53,078 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:51:53,078 - INFO - Generating results with timestamp: 2025-08-13 02:51:53 UTC
2025-08-13 04:51:53,078 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:51:53 UTC
2025-08-13 04:51:53,589 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:51:54,409 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:51:53 UTC
2025-08-13 04:52:01,291 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:52:02,292 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:52:02,292 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:52:02,302 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:52:02,302 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:52:02,302 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:52:02,302 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:52:02,302 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:52:02,302 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:52:02,302 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:52:02,302 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:52:02,302 - INFO - Generating results with timestamp: 2025-08-13 02:52:02 UTC
2025-08-13 04:52:02,302 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:52:02 UTC
2025-08-13 04:52:02,908 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:52:04,035 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:52:02 UTC
2025-08-13 04:52:04,139 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:52:05,160 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:52:05,161 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:52:05,161 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:52:05,161 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:52:05,161 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:52:05,162 - INFO - Generating results with timestamp: 2025-08-13 02:52:05 UTC
2025-08-13 04:52:05,162 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:52:05 UTC
2025-08-13 04:52:05,672 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:52:06,492 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:52:05 UTC
2025-08-13 04:52:06,595 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:52:08,027 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:52:08,027 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:52:08,029 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:52:08,030 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:52:08,030 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:52:08,030 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:52:08,030 - INFO - Generating results with timestamp: 2025-08-13 02:52:08 UTC
2025-08-13 04:52:08,031 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:52:08 UTC
2025-08-13 04:52:08,541 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:52:09,769 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:52:08 UTC
2025-08-13 04:53:01,950 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:53:03,119 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:53:03,120 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:53:03,120 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:53:03,120 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:53:03,120 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:53:03,120 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:53:03,120 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:53:03,120 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:53:03,120 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:53:03,120 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:53:03,121 - INFO - Generating results with timestamp: 2025-08-13 02:53:03 UTC
2025-08-13 04:53:03,121 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:53:03 UTC
2025-08-13 04:53:03,631 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:53:04,450 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:53:03 UTC
2025-08-13 04:53:04,631 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:53:05,678 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:53:05,679 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:53:05,679 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:53:05,679 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:53:05,679 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:53:05,679 - INFO - Generating results with timestamp: 2025-08-13 02:53:05 UTC
2025-08-13 04:53:05,679 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:53:05 UTC
2025-08-13 04:53:06,191 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:53:06,907 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:53:05 UTC
2025-08-13 04:53:07,101 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:53:08,136 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:53:08,137 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:53:08,137 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:53:08,137 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:53:08,137 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:53:08,137 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:53:08,138 - INFO - Generating results with timestamp: 2025-08-13 02:53:08 UTC
2025-08-13 04:53:08,138 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:53:08 UTC
2025-08-13 04:53:08,649 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:53:10,186 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:53:08 UTC
2025-08-13 04:54:01,365 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:54:02,409 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:54:02,410 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:54:02,410 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:54:02,410 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:54:02,410 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:54:02,410 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:54:02,410 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:54:02,410 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:54:02,410 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:54:02,411 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:54:02,411 - INFO - Generating results with timestamp: 2025-08-13 02:54:02 UTC
2025-08-13 04:54:02,411 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:54:02 UTC
2025-08-13 04:54:02,920 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:54:03,842 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:54:02 UTC
2025-08-13 04:54:04,031 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:54:04,875 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:54:04,876 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:54:04,876 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:54:04,876 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:54:04,876 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:54:04,876 - INFO - Generating results with timestamp: 2025-08-13 02:54:04 UTC
2025-08-13 04:54:04,876 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:54:04 UTC
2025-08-13 04:54:05,541 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:54:06,300 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:54:04 UTC
2025-08-13 04:54:06,446 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:54:07,427 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:54:07,428 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:54:07,428 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:54:07,429 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:54:07,429 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:54:07,429 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:54:07,430 - INFO - Generating results with timestamp: 2025-08-13 02:54:07 UTC
2025-08-13 04:54:07,430 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:54:07 UTC
2025-08-13 04:54:07,940 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:54:08,963 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:54:07 UTC
2025-08-13 04:55:02,120 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:55:03,132 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:55:03,133 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:55:03,133 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:55:03,133 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:55:03,133 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:55:03,133 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:55:03,133 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:55:03,133 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:55:03,133 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:55:03,133 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:55:03,134 - INFO - Generating results with timestamp: 2025-08-13 02:55:03 UTC
2025-08-13 04:55:03,134 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:55:03 UTC
2025-08-13 04:55:03,644 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:55:04,464 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:55:03 UTC
2025-08-13 04:55:04,593 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:55:05,590 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:55:05,590 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:55:05,590 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:55:05,590 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:55:05,590 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:55:05,591 - INFO - Generating results with timestamp: 2025-08-13 02:55:05 UTC
2025-08-13 04:55:05,591 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:55:05 UTC
2025-08-13 04:55:06,031 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:55:06,819 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:55:05 UTC
2025-08-13 04:55:06,960 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:55:07,874 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:55:07,875 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:55:07,875 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:55:07,875 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:55:07,875 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:55:07,876 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:55:07,876 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:55:07,877 - INFO - Generating results with timestamp: 2025-08-13 02:55:07 UTC
2025-08-13 04:55:07,877 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:55:07 UTC
2025-08-13 04:55:08,316 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:55:09,353 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:55:07 UTC
2025-08-13 04:56:01,528 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:56:02,457 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:56:02,457 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:56:02,457 - WARNING - Invalid vote format in comment by fredvs: Vot***
2025-08-13 04:56:02,457 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:56:02,458 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:56:02,458 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:56:02,458 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:56:02,458 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:56:02,458 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:56:02,458 - WARNING - Invalid vote format in comment by fredvs: Bla***
2025-08-13 04:56:02,458 - INFO - Generating results with timestamp: 2025-08-13 02:56:02 UTC
2025-08-13 04:56:02,458 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:56:02 UTC
2025-08-13 04:56:02,891 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:56:03,669 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:56:02 UTC
2025-08-13 04:56:03,802 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:56:04,686 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:56:04,686 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:56:04,686 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:56:04,686 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:56:04,686 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:56:04,686 - INFO - Generating results with timestamp: 2025-08-13 02:56:04 UTC
2025-08-13 04:56:04,686 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:56:04 UTC
2025-08-13 04:56:05,109 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:56:05,816 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:56:04 UTC
2025-08-13 04:56:06,012 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:56:06,889 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:56:06,890 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:56:06,890 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:56:06,890 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:56:06,890 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:56:06,890 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:56:06,890 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:56:06,891 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:56:06,891 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:56:06,892 - INFO - Generating results with timestamp: 2025-08-13 02:56:06 UTC
2025-08-13 04:56:06,892 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:56:06 UTC
2025-08-13 04:56:07,508 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:56:08,373 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:56:06 UTC
2025-08-13 04:57:01,592 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:57:02,634 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:57:02,634 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 04:57:02,634 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 04:57:02,634 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:57:02,634 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:57:02,634 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:57:02,635 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:57:02,635 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:57:02,635 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:57:02,635 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:57:02,635 - INFO - Generating results with timestamp: 2025-08-13 02:57:02 UTC
2025-08-13 04:57:02,635 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:57:02 UTC
2025-08-13 04:57:03,118 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:57:03,127 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:57:03,809 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:57:02 UTC
2025-08-13 04:57:03,983 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:57:04,106 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:57:04,106 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 04:57:04,106 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 04:57:04,106 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:57:04,106 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:57:04,106 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:57:04,106 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:57:04,106 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:57:04,106 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:57:04,106 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:57:04,106 - INFO - Generating results with timestamp: 2025-08-13 02:57:04 UTC
2025-08-13 04:57:04,107 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:57:04 UTC
2025-08-13 04:57:04,544 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:57:04,818 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:57:04,818 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:57:04,818 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:57:04,818 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:57:04,818 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:57:04,818 - INFO - Generating results with timestamp: 2025-08-13 02:57:04 UTC
2025-08-13 04:57:04,818 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:57:04 UTC
2025-08-13 04:57:05,297 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:57:04 UTC
2025-08-13 04:57:05,297 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:57:06,320 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:57:04 UTC
2025-08-13 04:57:06,609 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:57:07,550 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:57:07,551 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:57:07,552 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:57:07,552 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:57:07,552 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:57:07,552 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:57:07,553 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:57:07,553 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:57:07,553 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:57:07,553 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:57:07,553 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:57:07,553 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:57:07,553 - INFO - Generating results with timestamp: 2025-08-13 02:57:07 UTC
2025-08-13 04:57:07,554 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:57:07 UTC
2025-08-13 04:57:08,007 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:57:09,189 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:57:07 UTC
2025-08-13 04:58:01,412 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:58:02,743 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:58:02,744 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 04:58:02,744 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 04:58:02,744 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:58:02,744 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:58:02,744 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:58:02,744 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:58:02,744 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:58:02,744 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:58:02,744 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:58:02,744 - INFO - Generating results with timestamp: 2025-08-13 02:58:02 UTC
2025-08-13 04:58:02,744 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:58:02 UTC
2025-08-13 04:58:03,154 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:58:04,279 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:58:02 UTC
2025-08-13 04:58:04,441 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:58:05,405 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:58:05,406 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:58:05,406 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:58:05,406 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:58:05,406 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:58:05,406 - INFO - Generating results with timestamp: 2025-08-13 02:58:05 UTC
2025-08-13 04:58:05,406 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:58:05 UTC
2025-08-13 04:58:05,917 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:58:06,834 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:58:05 UTC
2025-08-13 04:58:06,998 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:58:07,988 - INFO - Fetched 19 comments from issue #8
2025-08-13 04:58:07,989 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 04:58:07,989 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 04:58:07,989 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 04:58:07,989 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 04:58:07,989 - WARNING - Invalid vote format in comment by callmetango: @fredvs Thank you for testing this! A side note: Everybody you tag with "@..." will get a Github notification. Maybe it is better to omit the '@' character while you are testing and add it back in the final/working version... 😉
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by fredvs: >Everybody you tag with "@..." will get a Github notification.

Are you talking about the text with (by @auser) like in  : `Logo 127 (by @xseadgdc):`?
And so it should be` Logo 127 (by xseadgdc)`?

Of course I will remove it (I did not know this).
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by callmetango: Yes, I am talking about this. And if the Github users do not unsubscribe from this issue, they will be informed of every new comment too. 😉
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by fredvs: Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?

(But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
2025-08-13 04:58:07,990 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> Vote: Logo 69

NOT NOW! 😆 Wait for it..!
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by callmetango: > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> 
> (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)

Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by fredvs: > > Like [this one](https://github.com/fredvs/test/issues/15) and with [this result](https://github.com/fredvs/test/issues/18)?
> > (But of course it is a prototype and using a real poll from gitHub/discussion would be better but, sadly, github allows only 8 (!) items and there are more than 130 logos at the moment...)
> 
> Only 8 items... Well, then we might have to find another solution. Splitting the polls in blocks of 8 seems odd.

Yes but with gitHub/discussion/poll not sure that we can associate a image.
Also you will need to create +- 20 differents polls + difficult to calculate the global result.

If you want I can try to do it using my test github but it seems to me not very convivial.
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by fredvs: Here exploration using discussion/poll with 2 polls (but should be +- 20 polls for all the logos).

https://github.com/fredvs/test/discussions/21
https://github.com/fredvs/test/discussions/22

I'm not sure I'll like it, maybe people will get lost with all these polls.
And how do I check if someone has already voted in another poll?
GitHub does this per poll, but not for multiple polls.
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by xgui4: can we do a real poll ? does it have tooo many ones ?
2025-08-13 04:58:07,990 - WARNING - Invalid vote format in comment by fredvs: > can we do a real poll ? does it have tooo many ones ?

We have already more than 130 logos and real pool from github/discussion allows only 8 items by pool.
See my previous post: https://github.com/fredvs/test/issues/8#issuecomment-3177422945

Otherwise we need something else than Github.
2025-08-13 04:58:07,991 - WARNING - Invalid vote format in comment by fredvs: Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.

Here the python script to calculate the result:

```
import requests
import re
import logging
import os
import time
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
REPO_NAME = "test"     # Change to "xserver" for final poll
POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"

# GitHub Personal Access Token
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def read_logo_metadata():
    """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
    logo_map = {}
    if not os.path.exists(LOGO_FORMATS_FILE):
        logger.error(f"{LOGO_FORMATS_FILE} not found")
        return logo_map
    with open(LOGO_FORMATS_FILE, 'r') as f:
        for line in f:
            if line.startswith("Logo"):
                try:
                    parts = line.split(" (User: ")
                    if len(parts) < 2:
                        logger.warning(f"Skipping malformed line: {line.strip()}")
                        continue
                    logo_info = parts[0].split(": ")[0]
                    logo_num = int(logo_info.split()[1])
                    username = parts[1].split(",")[0].strip()
                    filename = f"logo_{logo_num}_{username}.png"
                    logo_map[logo_num] = filename
                except Exception as e:
                    logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
    logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
    return logo_map

def fetch_issue_creation_date(issue_number):
    """Get the creation date of the poll issue."""
    response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
    if response.status_code == 200:
        return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
    return None

def fetch_all_comments():
    """Fetch all comments from the poll issue."""
    comments = []
    page = 1
    while True:
        response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
        if response.status_code != 200:
            logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
            return comments
        page_comments = response.json()
        if not page_comments:
            break
        comments.extend(page_comments)
        page += 1
        time.sleep(1)  # Avoid rate limits
    return comments

def check_user_creation_date(username, issue_creation_date):
    """Check if a user was created after the poll issue."""
    response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
    if response.status_code != 200:
        logger.warning(f"Failed to fetch user {username}: {response.status_code}")
        return False
    user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
    return user_creation_date > issue_creation_date

def calculate_results():
    """Calculate poll results and create/update results issue."""
    if not POLL_ISSUE_NUMBER:
        logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
        return

    issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
    if not issue_creation_date:
        return

    logo_map = read_logo_metadata()
    if not logo_map:
        logger.warning("No logos found in logo_formats.txt; links and images will be omitted")

    comments = fetch_all_comments()
    logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")

    votes = {}
    duplicates = []
    suspicious = []
    vote_pattern = r'^Vote: Logo (\d+)$'

    for comment in comments:
        username = comment['user']['login']
        body = comment['body'].strip()
        match = re.match(vote_pattern, body)
        if match:
            logo_num = int(match.group(1))
            if username in votes:
                duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
            else:
                votes[username] = logo_num
                if check_user_creation_date(username, issue_creation_date):
                    suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")

    vote_counts = {}
    for logo_num in votes.values():
        vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1

    total_valid_votes = len(votes)  # Number of unique voters (one vote per user)

    results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})

## Total Valid Votes
{total_valid_votes} valid votes

## Vote Counts
"""
    for logo_num in sorted(vote_counts.keys()):
        logo_text = f"Logo {logo_num}"
        if logo_num in logo_map:
            logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
            logo_text = f"[Logo {logo_num}]({logo_url})"
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
        else:
            logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
            results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"

    if duplicates:
        results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
    if suspicious:
        results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"

    results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"

    if RESULTS_ISSUE_NUMBER:
        # Update existing results issue
        update_data = {"body": results_body}
        response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
        if response.status_code == 200:
            logger.info(f"Updated results issue: {response.json()['html_url']}")
        else:
            logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
    else:
        # Create new results issue (only if none exists)
        issue_data = {
            "title": "XLibre Logo Poll Results (Test)",
            "body": results_body,
            "labels": ["poll", "results"]
        }
        response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
        if response.status_code == 201:
            new_issue_number = response.json()['number']
            logger.info(f"Created results issue: {response.json()['html_url']}")
            logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
        else:
            logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")

def main():
    """Main function to calculate and display poll results."""
    calculate_results()

if __name__ == "__main__":
    main()

```
2025-08-13 04:58:07,991 - WARNING - Invalid vote format in comment by xgui4: > Note that using issue is a real poll, for calculation this script is used and check for double vote, new users after begin of poll, etc.
> 
> Here the python script to calculate the result:
> 
> ```
> import requests
> import re
> import logging
> import os
> import time
> from datetime import datetime
> 
> # Set up logging
> logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
> logger = logging.getLogger(__name__)
> 
> # Configuration
> REPO_OWNER = "fredvs"  # Change to "X11Libre" for final poll
> REPO_NAME = "test"     # Change to "xserver" for final poll
> POLL_ISSUE_NUMBER = 15  # Set to your test poll issue number (e.g., 8)
> RESULTS_ISSUE_NUMBER = 18  # Set to existing results issue number (e.g., 9) to update; initially None to create
> LOGO_FORMATS_FILE = "logo_formats.txt"  # Path to logo_formats.txt
> LOGO_BASE_URL = "https://raw.githubusercontent.com/fredvs/test/main/logos"  # Logo image URL base
> GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
> COMMENTS_URL = f"{GITHUB_API_URL}/issues/{POLL_ISSUE_NUMBER}/comments"
> 
> # GitHub Personal Access Token
> GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or input("Enter your GitHub Personal Access Token: ")
> HEADERS = {
>     "Authorization": f"token {GITHUB_TOKEN}",
>     "Accept": "application/vnd.github.v3+json"
> }
> 
> def read_logo_metadata():
>     """Read logo metadata from logo_formats.txt to map logo numbers to filenames."""
>     logo_map = {}
>     if not os.path.exists(LOGO_FORMATS_FILE):
>         logger.error(f"{LOGO_FORMATS_FILE} not found")
>         return logo_map
>     with open(LOGO_FORMATS_FILE, 'r') as f:
>         for line in f:
>             if line.startswith("Logo"):
>                 try:
>                     parts = line.split(" (User: ")
>                     if len(parts) < 2:
>                         logger.warning(f"Skipping malformed line: {line.strip()}")
>                         continue
>                     logo_info = parts[0].split(": ")[0]
>                     logo_num = int(logo_info.split()[1])
>                     username = parts[1].split(",")[0].strip()
>                     filename = f"logo_{logo_num}_{username}.png"
>                     logo_map[logo_num] = filename
>                 except Exception as e:
>                     logger.warning(f"Failed to parse metadata line: {line.strip()} ({e})")
>     logger.info(f"Parsed {len(logo_map)} logos from {LOGO_FORMATS_FILE}")
>     return logo_map
> 
> def fetch_issue_creation_date(issue_number):
>     """Get the creation date of the poll issue."""
>     response = requests.get(f"{GITHUB_API_URL}/issues/{issue_number}", headers=HEADERS)
>     if response.status_code == 200:
>         return datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     logger.error(f"Failed to fetch issue {issue_number}: {response.status_code} {response.json().get('message', '')}")
>     return None
> 
> def fetch_all_comments():
>     """Fetch all comments from the poll issue."""
>     comments = []
>     page = 1
>     while True:
>         response = requests.get(f"{COMMENTS_URL}?page={page}&per_page=100", headers=HEADERS)
>         if response.status_code != 200:
>             logger.error(f"Error fetching comments: {response.status_code} {response.json().get('message', '')}")
>             return comments
>         page_comments = response.json()
>         if not page_comments:
>             break
>         comments.extend(page_comments)
>         page += 1
>         time.sleep(1)  # Avoid rate limits
>     return comments
> 
> def check_user_creation_date(username, issue_creation_date):
>     """Check if a user was created after the poll issue."""
>     response = requests.get(f"https://api.github.com/users/{username}", headers=HEADERS)
>     if response.status_code != 200:
>         logger.warning(f"Failed to fetch user {username}: {response.status_code}")
>         return False
>     user_creation_date = datetime.strptime(response.json()['created_at'], '%Y-%m-%dT%H:%M:%SZ')
>     return user_creation_date > issue_creation_date
> 
> def calculate_results():
>     """Calculate poll results and create/update results issue."""
>     if not POLL_ISSUE_NUMBER:
>         logger.error("Please set POLL_ISSUE_NUMBER to the poll issue number")
>         return
> 
>     issue_creation_date = fetch_issue_creation_date(POLL_ISSUE_NUMBER)
>     if not issue_creation_date:
>         return
> 
>     logo_map = read_logo_metadata()
>     if not logo_map:
>         logger.warning("No logos found in logo_formats.txt; links and images will be omitted")
> 
>     comments = fetch_all_comments()
>     logger.info(f"Fetched {len(comments)} comments from issue #{POLL_ISSUE_NUMBER}")
> 
>     votes = {}
>     duplicates = []
>     suspicious = []
>     vote_pattern = r'^Vote: Logo (\d+)$'
> 
>     for comment in comments:
>         username = comment['user']['login']
>         body = comment['body'].strip()
>         match = re.match(vote_pattern, body)
>         if match:
>             logo_num = int(match.group(1))
>             if username in votes:
>                 duplicates.append(f"User {username} attempted multiple votes (kept Logo {votes[username]}, ignored Logo {logo_num})")
>             else:
>                 votes[username] = logo_num
>                 if check_user_creation_date(username, issue_creation_date):
>                     suspicious.append(f"User {username} (voted Logo {logo_num}) created after poll start")
> 
>     vote_counts = {}
>     for logo_num in votes.values():
>         vote_counts[logo_num] = vote_counts.get(logo_num, 0) + 1
> 
>     total_valid_votes = len(votes)  # Number of unique voters (one vote per user)
> 
>     results_body = f"""# XLibre Logo Poll Results (Test) (Updated {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')})
> 
> ## Total Valid Votes
> {total_valid_votes} valid votes
> 
> ## Vote Counts
> """
>     for logo_num in sorted(vote_counts.keys()):
>         logo_text = f"Logo {logo_num}"
>         if logo_num in logo_map:
>             logo_url = f"{LOGO_BASE_URL}/{logo_map[logo_num]}"
>             logo_text = f"[Logo {logo_num}]({logo_url})"
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n![Logo {logo_num}]({logo_url})\n"
>         else:
>             logger.warning(f"No logo file found for Logo {logo_num} in logo_formats.txt")
>             results_body += f"{logo_text}: {vote_counts[logo_num]} votes\n"
> 
>     if duplicates:
>         results_body += "\n## Duplicate Votes\n" + "\n".join(duplicates) + "\n"
>     if suspicious:
>         results_body += "\n## Suspicious Votes\n" + "\n".join(suspicious) + "\n"
> 
>     results_body += "\n*Results are updated periodically or manually until the poll deadline (2025-08-25 23:59 CEST).*"
> 
>     if RESULTS_ISSUE_NUMBER:
>         # Update existing results issue
>         update_data = {"body": results_body}
>         response = requests.patch(f"{GITHUB_API_URL}/issues/{RESULTS_ISSUE_NUMBER}", headers=HEADERS, json=update_data)
>         if response.status_code == 200:
>             logger.info(f"Updated results issue: {response.json()['html_url']}")
>         else:
>             logger.error(f"Failed to update results issue: {response.status_code} {response.json().get('message', '')}")
>     else:
>         # Create new results issue (only if none exists)
>         issue_data = {
>             "title": "XLibre Logo Poll Results (Test)",
>             "body": results_body,
>             "labels": ["poll", "results"]
>         }
>         response = requests.post(f"{GITHUB_API_URL}/issues", headers=HEADERS, json=issue_data)
>         if response.status_code == 201:
>             new_issue_number = response.json()['number']
>             logger.info(f"Created results issue: {response.json()['html_url']}")
>             logger.info(f"Set RESULTS_ISSUE_NUMBER = {new_issue_number} for future updates")
>         else:
>             logger.error(f"Failed to create results issue: {response.status_code} {response.json().get('message', '')}")
> 
> def main():
>     """Main function to calculate and display poll results."""
>     calculate_results()
> 
> if __name__ == "__main__":
>     main()
> ```

is that python ?
2025-08-13 04:58:07,991 - WARNING - Invalid vote format in comment by fredvs: >is that python ?

Yes and the python-scripts + environment-set are here: https://github.com/fredvs/test/issues/14

If you are not familiar with python, I can explain you what to install and how to use the scripts (for Linux).
2025-08-13 04:58:07,991 - WARNING - Invalid vote format in comment by fredvs: For testing, everybody is welcome to vote this poll:

[XLibre Logo poll demo](https://github.com/fredvs/test/issues/35)


And also try to add more comments, with different vote to check if all is filtered as it should.
For the result, there is a update each hour.
2025-08-13 04:58:07,991 - INFO - Generating results with timestamp: 2025-08-13 02:58:07 UTC
2025-08-13 04:58:07,992 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 02:58:07 UTC
2025-08-13 04:58:08,684 - INFO - Issue #13 state: open, locked: False
2025-08-13 04:58:09,605 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 02:58:07 UTC
2025-08-13 04:59:01,795 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:59:02,680 - INFO - Fetched 9 comments from issue #35
2025-08-13 04:59:02,680 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 04:59:02,680 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 04:59:02,680 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:59:02,680 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 04:59:02,680 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 04:59:02,680 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 04:59:02,680 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 04:59:02,680 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 04:59:02,680 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 04:59:02,680 - INFO - Generating results with timestamp: 2025-08-13 02:59:02 UTC
2025-08-13 04:59:02,680 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 02:59:02 UTC
2025-08-13 04:59:03,262 - INFO - Issue #36 state: open, locked: False
2025-08-13 04:59:04,082 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 02:59:02 UTC
2025-08-13 04:59:04,316 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:59:05,208 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:59:05,208 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:59:05,208 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:59:05,208 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:59:05,208 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:59:05,209 - INFO - Generating results with timestamp: 2025-08-13 02:59:05 UTC
2025-08-13 04:59:05,209 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:59:05 UTC
2025-08-13 04:59:05,720 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:59:06,449 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:59:05 UTC
2025-08-13 04:59:06,623 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 04:59:07,563 - INFO - Fetched 4 comments from issue #25
2025-08-13 04:59:07,563 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 04:59:07,563 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 04:59:07,563 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 04:59:07,563 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 04:59:07,563 - INFO - Generating results with timestamp: 2025-08-13 02:59:07 UTC
2025-08-13 04:59:07,563 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 02:59:07 UTC
2025-08-13 04:59:07,967 - INFO - Issue #26 state: open, locked: False
2025-08-13 04:59:08,672 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 02:59:07 UTC
2025-08-13 05:00:01,791 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:00:03,065 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:00:03,066 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:00:03,066 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:00:03,066 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:00:03,066 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:00:03,066 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:00:03,066 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:00:03,066 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:00:03,066 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:00:03,066 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:00:03,066 - INFO - Generating results with timestamp: 2025-08-13 03:00:03 UTC
2025-08-13 05:00:03,067 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:00:03 UTC
2025-08-13 05:00:03,577 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:00:04,908 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:00:03 UTC
2025-08-13 05:00:05,014 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:00:05,829 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:00:05,830 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:00:05,830 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:00:05,830 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:00:05,830 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:00:05,831 - INFO - Generating results with timestamp: 2025-08-13 03:00:05 UTC
2025-08-13 05:00:05,831 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:00:05 UTC
2025-08-13 05:00:06,342 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:00:07,006 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:00:05 UTC
2025-08-13 05:00:07,111 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:00:08,082 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:00:08,083 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:00:08,083 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:00:08,083 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:00:08,083 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:00:08,083 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:00:08,084 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:00:08,084 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:00:08,084 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:00:08,084 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:00:08,084 - INFO - Generating results with timestamp: 2025-08-13 03:00:08 UTC
2025-08-13 05:00:08,084 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:00:08 UTC
2025-08-13 05:00:08,596 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:00:09,619 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:00:08 UTC
2025-08-13 05:01:01,744 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:01:02,662 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:01:02,663 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:01:02,663 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:01:02,663 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:01:02,663 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:01:02,663 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:01:02,663 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:01:02,663 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:01:02,663 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:01:02,663 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:01:02,664 - INFO - Generating results with timestamp: 2025-08-13 03:01:02 UTC
2025-08-13 05:01:02,664 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:01:02 UTC
2025-08-13 05:01:03,174 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:01:04,095 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:01:02 UTC
2025-08-13 05:01:04,204 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:01:05,632 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:01:05,632 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:01:05,632 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:01:05,632 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:01:05,633 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:01:05,633 - INFO - Generating results with timestamp: 2025-08-13 03:01:05 UTC
2025-08-13 05:01:05,633 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:01:05 UTC
2025-08-13 05:01:06,143 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:01:07,270 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:01:05 UTC
2025-08-13 05:01:07,373 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:01:08,294 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:01:08,295 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:01:08,295 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:01:08,295 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:01:08,295 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:01:08,295 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:01:08,295 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:01:08,295 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:01:08,295 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:01:08,295 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:01:08,295 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:01:08,295 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:01:08,296 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:01:08,296 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:01:08,296 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:01:08,296 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:01:08,296 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:01:08,296 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:01:08,296 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:01:08,296 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:01:08,296 - INFO - Generating results with timestamp: 2025-08-13 03:01:08 UTC
2025-08-13 05:01:08,296 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:01:08 UTC
2025-08-13 05:01:08,755 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:01:09,523 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:01:08 UTC
2025-08-13 05:02:01,642 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:02:02,668 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:02:02,669 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:02:02,669 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:02:02,669 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:02:02,669 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:02:02,669 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:02:02,669 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:02:02,669 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:02:02,669 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:02:02,669 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:02:02,669 - INFO - Generating results with timestamp: 2025-08-13 03:02:02 UTC
2025-08-13 05:02:02,669 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:02:02 UTC
2025-08-13 05:02:03,181 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:02:04,307 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:02:02 UTC
2025-08-13 05:02:04,408 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:02:05,331 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:02:05,332 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:02:05,332 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:02:05,332 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:02:05,332 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:02:05,332 - INFO - Generating results with timestamp: 2025-08-13 03:02:05 UTC
2025-08-13 05:02:05,333 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:02:05 UTC
2025-08-13 05:02:05,844 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:02:06,765 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:02:05 UTC
2025-08-13 05:02:06,865 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:02:07,789 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:02:07,790 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:02:07,790 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:02:07,790 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:02:07,790 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:02:07,790 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:02:07,791 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:02:07,791 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:02:07,791 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:02:07,791 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:02:07,791 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:02:07,791 - INFO - Generating results with timestamp: 2025-08-13 03:02:07 UTC
2025-08-13 05:02:07,791 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:02:07 UTC
2025-08-13 05:02:08,404 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:02:09,428 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:02:07 UTC
2025-08-13 05:03:01,558 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:03:02,983 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:03:02,984 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:03:02,984 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:03:02,984 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:03:02,984 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:03:02,984 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:03:02,984 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:03:02,984 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:03:02,984 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:03:02,984 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:03:02,984 - INFO - Generating results with timestamp: 2025-08-13 03:03:02 UTC
2025-08-13 05:03:02,985 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:03:02 UTC
2025-08-13 05:03:03,495 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:03:04,314 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:03:02 UTC
2025-08-13 05:03:04,419 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:03:05,646 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:03:05,646 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:03:05,646 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:03:05,647 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:03:05,647 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:03:05,647 - INFO - Generating results with timestamp: 2025-08-13 03:03:05 UTC
2025-08-13 05:03:05,647 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:03:05 UTC
2025-08-13 05:03:06,260 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:03:07,385 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:03:05 UTC
2025-08-13 05:03:07,495 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:03:08,615 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:03:08,615 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:03:08,616 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:03:08,616 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:03:08,616 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:03:08,616 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:03:08,616 - INFO - Generating results with timestamp: 2025-08-13 03:03:08 UTC
2025-08-13 05:03:08,616 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:03:08 UTC
2025-08-13 05:03:09,127 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:03:10,253 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:03:08 UTC
2025-08-13 05:04:01,363 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:04:02,273 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:04:02,274 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:04:02,274 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:04:02,274 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:04:02,274 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:04:02,274 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:04:02,274 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:04:02,274 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:04:02,274 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:04:02,274 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:04:02,275 - INFO - Generating results with timestamp: 2025-08-13 03:04:02 UTC
2025-08-13 05:04:02,275 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:04:02 UTC
2025-08-13 05:04:02,785 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:04:03,545 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:04:02 UTC
2025-08-13 05:04:03,646 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:04:04,629 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:04:04,629 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:04:04,629 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:04:04,630 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:04:04,630 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:04:04,630 - INFO - Generating results with timestamp: 2025-08-13 03:04:04 UTC
2025-08-13 05:04:04,630 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:04:04 UTC
2025-08-13 05:04:05,140 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:04:06,164 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:04:04 UTC
2025-08-13 05:04:06,258 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:04:07,700 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:04:07,700 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:04:07,701 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:04:07,701 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:04:07,701 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:04:07,701 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:04:07,701 - INFO - Generating results with timestamp: 2025-08-13 03:04:07 UTC
2025-08-13 05:04:07,701 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:04:07 UTC
2025-08-13 05:04:08,315 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:04:09,441 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:04:07 UTC
2025-08-13 05:05:01,550 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:05:02,894 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:05:02,895 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:05:02,895 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:05:02,895 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:05:02,895 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:05:02,895 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:05:02,895 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:05:02,895 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:05:02,895 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:05:02,895 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:05:02,896 - INFO - Generating results with timestamp: 2025-08-13 03:05:02 UTC
2025-08-13 05:05:02,896 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:05:02 UTC
2025-08-13 05:05:03,406 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:05:04,328 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:05:02 UTC
2025-08-13 05:05:04,427 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:05:05,235 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:05:05,236 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:05:05,236 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:05:05,236 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:05:05,236 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:05:05,236 - INFO - Generating results with timestamp: 2025-08-13 03:05:05 UTC
2025-08-13 05:05:05,236 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:05:05 UTC
2025-08-13 05:05:05,659 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:05:06,380 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:05:05 UTC
2025-08-13 05:05:06,517 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:05:07,503 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:05:07,503 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:05:07,504 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:05:07,504 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:05:07,504 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:05:07,504 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:05:07,505 - INFO - Generating results with timestamp: 2025-08-13 03:05:07 UTC
2025-08-13 05:05:07,505 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:05:07 UTC
2025-08-13 05:05:08,014 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:05:08,833 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:05:07 UTC
2025-08-13 05:06:01,961 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:06:02,807 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:06:02,808 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:06:02,808 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:06:02,808 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:06:02,808 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:06:02,808 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:06:02,808 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:06:02,808 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:06:02,808 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:06:02,808 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:06:02,809 - INFO - Generating results with timestamp: 2025-08-13 03:06:02 UTC
2025-08-13 05:06:02,809 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:06:02 UTC
2025-08-13 05:06:03,257 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:06:04,335 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:06:02 UTC
2025-08-13 05:06:04,430 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:06:05,461 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:06:05,462 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:06:05,462 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:06:05,462 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:06:05,462 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:06:05,463 - INFO - Generating results with timestamp: 2025-08-13 03:06:05 UTC
2025-08-13 05:06:05,463 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:06:05 UTC
2025-08-13 05:06:05,972 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:06:06,793 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:06:05 UTC
2025-08-13 05:06:06,887 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:06:08,278 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:06:08,278 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:06:08,278 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:06:08,279 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:06:08,279 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:06:08,279 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:06:08,279 - INFO - Generating results with timestamp: 2025-08-13 03:06:08 UTC
2025-08-13 05:06:08,280 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:06:08 UTC
2025-08-13 05:06:08,841 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:06:09,661 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:06:08 UTC
2025-08-13 05:07:01,775 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:07:02,831 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:07:02,831 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:07:02,831 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:07:02,832 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:07:02,832 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:07:02,832 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:07:02,832 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:07:02,832 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:07:02,832 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:07:02,832 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:07:02,832 - INFO - Generating results with timestamp: 2025-08-13 03:07:02 UTC
2025-08-13 05:07:02,832 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:07:02 UTC
2025-08-13 05:07:03,253 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:07:04,137 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:07:02 UTC
2025-08-13 05:07:04,245 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:07:05,366 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:07:05,366 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:07:05,366 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:07:05,366 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:07:05,366 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:07:05,366 - INFO - Generating results with timestamp: 2025-08-13 03:07:05 UTC
2025-08-13 05:07:05,366 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:07:05 UTC
2025-08-13 05:07:05,878 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:07:07,005 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:07:05 UTC
2025-08-13 05:07:07,111 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:07:08,541 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:07:08,542 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:07:08,542 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:07:08,542 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:07:08,542 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:07:08,542 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:07:08,542 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:07:08,542 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:07:08,542 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:07:08,543 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:07:08,543 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:07:08,543 - INFO - Generating results with timestamp: 2025-08-13 03:07:08 UTC
2025-08-13 05:07:08,544 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:07:08 UTC
2025-08-13 05:07:09,156 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:07:10,077 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:07:08 UTC
2025-08-13 05:08:01,187 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:08:02,199 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:08:02,200 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:08:02,200 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:08:02,200 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:08:02,200 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:08:02,201 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:08:02,201 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:08:02,201 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:08:02,201 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:08:02,201 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:08:02,201 - INFO - Generating results with timestamp: 2025-08-13 03:08:02 UTC
2025-08-13 05:08:02,201 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:08:02 UTC
2025-08-13 05:08:02,608 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:08:03,376 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:08:02 UTC
2025-08-13 05:08:03,476 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:08:04,554 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:08:04,555 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:08:04,555 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:08:04,555 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:08:04,555 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:08:04,555 - INFO - Generating results with timestamp: 2025-08-13 03:08:04 UTC
2025-08-13 05:08:04,555 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:08:04 UTC
2025-08-13 05:08:05,065 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:08:05,783 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:08:04 UTC
2025-08-13 05:08:05,882 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:08:07,217 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:08:07,217 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:08:07,218 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:08:07,218 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:08:07,218 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:08:07,218 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:08:07,219 - INFO - Generating results with timestamp: 2025-08-13 03:08:07 UTC
2025-08-13 05:08:07,219 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:08:07 UTC
2025-08-13 05:08:07,728 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:08:08,650 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:08:07 UTC
2025-08-13 05:27:18,282 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:27:19,305 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:27:19,306 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:27:19,306 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:27:19,307 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:27:19,307 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:27:19,307 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:27:19,307 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:27:19,307 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:27:19,307 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:27:19,307 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:27:19,307 - INFO - Generating results with timestamp: 2025-08-13 03:27:19 UTC
2025-08-13 05:27:19,308 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:27:19 UTC
2025-08-13 05:27:19,715 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:27:20,636 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:27:19 UTC
2025-08-13 05:27:20,728 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:27:21,659 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:27:21,660 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:27:21,660 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:27:21,660 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:27:21,660 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:27:21,660 - INFO - Generating results with timestamp: 2025-08-13 03:27:21 UTC
2025-08-13 05:27:21,660 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:27:21 UTC
2025-08-13 05:27:22,172 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:27:23,298 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:27:21 UTC
2025-08-13 05:27:23,387 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:27:24,528 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:27:24,529 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:27:24,529 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:27:24,529 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:27:24,530 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:27:24,530 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:27:24,530 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:27:24,531 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:27:24,531 - INFO - Generating results with timestamp: 2025-08-13 03:27:24 UTC
2025-08-13 05:27:24,531 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:27:24 UTC
2025-08-13 05:27:25,039 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:27:26,165 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:27:24 UTC
2025-08-13 05:28:23,615 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:28:24,841 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:28:24,842 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:28:24,842 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:28:24,842 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:28:24,842 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:28:24,842 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:28:24,842 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:28:24,843 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:28:24,843 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:28:24,843 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:28:24,843 - INFO - Generating results with timestamp: 2025-08-13 03:28:24 UTC
2025-08-13 05:28:24,843 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:28:24 UTC
2025-08-13 05:28:25,352 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:28:26,100 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:28:24 UTC
2025-08-13 05:28:26,194 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:28:27,196 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:28:27,197 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:28:27,197 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:28:27,197 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:28:27,198 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:28:27,198 - INFO - Generating results with timestamp: 2025-08-13 03:28:27 UTC
2025-08-13 05:28:27,198 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:28:27 UTC
2025-08-13 05:28:27,707 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:28:28,629 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:28:27 UTC
2025-08-13 05:28:28,723 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:28:29,756 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:28:29,757 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:28:29,757 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:28:29,757 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:28:29,758 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:28:29,758 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:28:29,758 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:28:29,758 - INFO - Generating results with timestamp: 2025-08-13 03:28:29 UTC
2025-08-13 05:28:29,759 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:28:29 UTC
2025-08-13 05:28:30,370 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:28:31,497 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:28:29 UTC
2025-08-13 05:30:01,798 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:30:02,939 - INFO - Fetched 9 comments from issue #35
2025-08-13 05:30:02,940 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:30:02,940 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:30:02,940 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:30:02,940 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:30:02,940 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:30:02,940 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:30:02,940 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:30:02,940 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:30:02,940 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:30:02,940 - INFO - Generating results with timestamp: 2025-08-13 03:30:02 UTC
2025-08-13 05:30:02,941 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:30:02 UTC
2025-08-13 05:30:03,451 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:30:04,269 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:30:02 UTC
2025-08-13 05:30:04,361 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:30:05,500 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:30:05,501 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:30:05,501 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:30:05,501 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:30:05,501 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:30:05,501 - INFO - Generating results with timestamp: 2025-08-13 03:30:05 UTC
2025-08-13 05:30:05,502 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:30:05 UTC
2025-08-13 05:30:06,010 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:30:07,021 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:30:05 UTC
2025-08-13 05:30:07,114 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:30:08,058 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:30:08,059 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:30:08,059 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:30:08,059 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:30:08,059 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:30:08,059 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:30:08,060 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:30:08,060 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:30:08,060 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:30:08,060 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:30:08,060 - INFO - Generating results with timestamp: 2025-08-13 03:30:08 UTC
2025-08-13 05:30:08,060 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:30:08 UTC
2025-08-13 05:30:08,571 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:30:09,391 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:30:08 UTC
2025-08-13 05:33:28,784 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:33:29,889 - INFO - Fetched 10 comments from issue #35
2025-08-13 05:33:29,890 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:33:29,890 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 05:33:29,890 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:33:29,890 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 05:33:29,890 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 05:33:29,890 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 05:33:29,890 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 05:33:29,890 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 05:33:29,890 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 05:33:29,890 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 05:33:29,891 - INFO - Generating results with timestamp: 2025-08-13 03:33:29 UTC
2025-08-13 05:33:29,891 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 03:33:29 UTC
2025-08-13 05:33:30,401 - INFO - Issue #36 state: open, locked: False
2025-08-13 05:33:31,526 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 03:33:29 UTC
2025-08-13 05:33:31,619 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:33:32,653 - INFO - Fetched 4 comments from issue #25
2025-08-13 05:33:32,653 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 05:33:32,653 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 05:33:32,653 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 05:33:32,654 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 05:33:32,654 - INFO - Generating results with timestamp: 2025-08-13 03:33:32 UTC
2025-08-13 05:33:32,654 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 03:33:32 UTC
2025-08-13 05:33:33,165 - INFO - Issue #26 state: open, locked: False
2025-08-13 05:33:34,190 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 03:33:32 UTC
2025-08-13 05:33:34,281 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 05:33:35,213 - INFO - Fetched 19 comments from issue #8
2025-08-13 05:33:35,214 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 05:33:35,215 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 05:33:35,215 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 05:33:35,215 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 05:33:35,215 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 05:33:35,216 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 05:33:35,216 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 05:33:35,216 - INFO - Generating results with timestamp: 2025-08-13 03:33:35 UTC
2025-08-13 05:33:35,216 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 03:33:35 UTC
2025-08-13 05:33:35,726 - INFO - Issue #13 state: open, locked: False
2025-08-13 05:33:36,648 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 03:33:35 UTC
2025-08-13 06:00:01,548 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:00:02,617 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:00:02,618 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 06:00:02,618 - WARNING - Invalid vote format in comment by fredvs: Vote L***
2025-08-13 06:00:02,618 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:00:02,618 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:00:02,618 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:00:02,618 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:00:02,618 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:00:02,618 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:00:02,618 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 06:00:02,618 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:00:02,619 - INFO - Generating results with timestamp: 2025-08-13 04:00:02 UTC
2025-08-13 06:00:02,619 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:00:02 UTC
2025-08-13 06:00:03,045 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:00:03,845 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:00:02 UTC
2025-08-13 06:00:03,956 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:00:04,870 - INFO - Fetched 4 comments from issue #25
2025-08-13 06:00:04,871 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:00:04,871 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 06:00:04,871 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 06:00:04,871 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 06:00:04,871 - INFO - Generating results with timestamp: 2025-08-13 04:00:04 UTC
2025-08-13 06:00:04,871 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 04:00:04 UTC
2025-08-13 06:00:05,381 - INFO - Issue #26 state: open, locked: False
2025-08-13 06:00:06,507 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 04:00:04 UTC
2025-08-13 06:00:06,613 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:00:07,532 - INFO - Fetched 19 comments from issue #8
2025-08-13 06:00:07,532 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 06:00:07,533 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 06:00:07,533 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by callmetango: @fredv***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: >Every***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by callmetango: Yes, I***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: Like [***
2025-08-13 06:00:07,533 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by callmetango: @xcrsz***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by callmetango: > Like***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: > > Li***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: Here e***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by xgui4: can we***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: > can ***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: Note t***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by xgui4: > Note***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: >is th***
2025-08-13 06:00:07,533 - WARNING - Invalid vote format in comment by fredvs: For te***
2025-08-13 06:00:07,534 - INFO - Generating results with timestamp: 2025-08-13 04:00:07 UTC
2025-08-13 06:00:07,534 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 04:00:07 UTC
2025-08-13 06:00:08,147 - INFO - Issue #13 state: open, locked: False
2025-08-13 06:00:09,170 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 04:00:07 UTC
2025-08-13 06:19:34,258 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:19:35,814 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:19:35,815 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 06:19:35,815 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 06:19:35,815 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:19:35,815 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:19:35,815 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:19:35,815 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:19:35,815 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:19:35,815 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:19:35,815 - WARNING - Invalid vote format in comment by fredvs: Blabla
2025-08-13 06:19:35,815 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:19:35,816 - INFO - Generating results with timestamp: 2025-08-13 04:19:35 UTC
2025-08-13 06:19:35,816 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:19:35 UTC
2025-08-13 06:19:36,324 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:19:37,348 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:19:35 UTC
2025-08-13 06:21:19,892 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:21:20,977 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:21:20,977 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 06:21:20,978 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 06:21:20,978 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:21:20,978 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:21:20,978 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:21:20,978 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:21:20,978 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:21:20,978 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:21:20,978 - WARNING - Invalid vote format in comment by fredvs: Blablablablablablabl***
2025-08-13 06:21:20,978 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:21:20,978 - INFO - Generating results with timestamp: 2025-08-13 04:21:20 UTC
2025-08-13 06:21:20,979 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:21:20 UTC
2025-08-13 06:21:21,489 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:21:22,206 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:21:20 UTC
2025-08-13 06:23:22,564 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:23:23,858 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:23:23,859 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 65
2025-08-13 06:23:23,859 - WARNING - Invalid vote format in comment by fredvs: Vote Logo: 55
2025-08-13 06:23:23,859 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:23:23,859 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:23:23,859 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:23:23,859 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:23:23,859 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:23:23,859 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:23:23,860 - WARNING - Invalid vote format in comment by fredvs: Blablablablablablabl***
2025-08-13 06:23:23,860 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:23:23,860 - INFO - Generating results with timestamp: 2025-08-13 04:23:23 UTC
2025-08-13 06:23:23,860 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:23:23 UTC
2025-08-13 06:23:24,370 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:23:25,496 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:23:23 UTC
2025-08-13 06:26:21,250 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:26:22,240 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:26:22,240 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:26:22,241 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:26:22,241 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:26:22,241 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:26:22,241 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:26:22,241 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:26:22,241 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:26:22,242 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:26:22,242 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 06:26:22,242 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:26:22,242 - INFO - Generating results with timestamp: 2025-08-13 04:26:22 UTC
2025-08-13 06:26:22,242 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:26:22 UTC
2025-08-13 06:26:22,855 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:26:23,674 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:26:22 UTC
2025-08-13 06:29:09,042 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:29:09,972 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:29:09,973 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:29:09,983 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:29:09,983 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:29:09,983 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:29:09,983 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:29:09,983 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:29:09,983 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:29:09,983 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:29:09,983 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 06:29:09,983 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:29:09,984 - INFO - Generating results with timestamp: 2025-08-13 04:29:09 UTC
2025-08-13 06:29:09,984 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:29:09 UTC
2025-08-13 06:29:10,792 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:29:11,817 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:29:09 UTC
2025-08-13 06:29:11,912 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:29:12,942 - INFO - Fetched 4 comments from issue #25
2025-08-13 06:29:12,943 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:29:12,943 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 06:29:12,943 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 06:29:12,943 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 06:29:12,944 - INFO - Generating results with timestamp: 2025-08-13 04:29:12 UTC
2025-08-13 06:29:12,944 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 04:29:12 UTC
2025-08-13 06:29:13,454 - INFO - Issue #26 state: open, locked: False
2025-08-13 06:29:14,683 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 04:29:12 UTC
2025-08-13 06:29:14,792 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:29:16,322 - INFO - Fetched 19 comments from issue #8
2025-08-13 06:29:16,323 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 06:29:16,323 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 06:29:16,323 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 06:29:16,323 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 06:29:16,324 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 06:29:16,324 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 06:29:16,325 - INFO - Generating results with timestamp: 2025-08-13 04:29:16 UTC
2025-08-13 06:29:16,325 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 04:29:16 UTC
2025-08-13 06:29:16,833 - INFO - Issue #13 state: open, locked: False
2025-08-13 06:29:17,756 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 04:29:16 UTC
2025-08-13 06:30:01,328 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:30:02,509 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:30:02,509 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:30:02,509 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:30:02,510 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:30:02,510 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:30:02,510 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:30:02,510 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:30:02,510 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:30:02,510 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:30:02,510 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 06:30:02,510 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:30:02,510 - INFO - Generating results with timestamp: 2025-08-13 04:30:02 UTC
2025-08-13 06:30:02,510 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:30:02 UTC
2025-08-13 06:30:03,015 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:30:03,835 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:30:02 UTC
2025-08-13 06:30:03,932 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:30:04,858 - INFO - Fetched 4 comments from issue #25
2025-08-13 06:30:04,859 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:30:04,859 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 06:30:04,859 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 06:30:04,859 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 06:30:04,859 - INFO - Generating results with timestamp: 2025-08-13 04:30:04 UTC
2025-08-13 06:30:04,859 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 04:30:04 UTC
2025-08-13 06:30:05,371 - INFO - Issue #26 state: open, locked: False
2025-08-13 06:30:06,499 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 04:30:04 UTC
2025-08-13 06:30:06,610 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:30:07,624 - INFO - Fetched 19 comments from issue #8
2025-08-13 06:30:07,625 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 06:30:07,625 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 06:30:07,625 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 06:30:07,625 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 06:30:07,625 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 06:30:07,626 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 06:30:07,626 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 06:30:07,626 - INFO - Generating results with timestamp: 2025-08-13 04:30:07 UTC
2025-08-13 06:30:07,626 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 04:30:07 UTC
2025-08-13 06:30:08,342 - INFO - Issue #13 state: open, locked: False
2025-08-13 06:30:09,365 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 04:30:07 UTC
2025-08-13 06:33:19,079 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:33:20,342 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:33:20,342 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:33:20,343 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:33:20,343 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:33:20,343 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:33:20,343 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:33:20,343 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:33:20,343 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:33:20,343 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:33:20,343 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 06:33:20,343 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:33:20,344 - INFO - Generating results with timestamp: 2025-08-13 04:33:20 UTC
2025-08-13 06:33:20,344 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:33:20 UTC
2025-08-13 06:33:20,854 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:33:21,674 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:33:20 UTC
2025-08-13 06:33:21,769 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:33:22,698 - INFO - Fetched 4 comments from issue #25
2025-08-13 06:33:22,699 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:33:22,699 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 06:33:22,699 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 06:33:22,699 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 06:33:22,700 - INFO - Generating results with timestamp: 2025-08-13 04:33:22 UTC
2025-08-13 06:33:22,700 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 04:33:22 UTC
2025-08-13 06:33:23,210 - INFO - Issue #26 state: open, locked: False
2025-08-13 06:33:24,131 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 04:33:22 UTC
2025-08-13 06:33:24,225 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:33:25,258 - INFO - Fetched 19 comments from issue #8
2025-08-13 06:33:25,258 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 06:33:25,259 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 06:33:25,259 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 06:33:25,259 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 06:33:25,259 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 06:33:25,260 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 06:33:25,260 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 06:33:25,260 - INFO - Generating results with timestamp: 2025-08-13 04:33:25 UTC
2025-08-13 06:33:25,260 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 04:33:25 UTC
2025-08-13 06:33:25,770 - INFO - Issue #13 state: open, locked: False
2025-08-13 06:33:26,794 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 04:33:25 UTC
2025-08-13 06:52:02,680 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:52:04,084 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:52:04,085 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:52:04,085 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:52:04,085 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:52:04,085 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:52:04,085 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:52:04,085 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:52:04,086 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:52:04,086 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:52:04,086 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 06:52:04,086 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:52:04,086 - INFO - Generating results with timestamp: 2025-08-13 04:52:04 UTC
2025-08-13 06:52:04,086 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:52:04 UTC
2025-08-13 06:52:04,596 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:52:05,418 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:52:04 UTC
2025-08-13 06:52:05,513 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:52:06,337 - INFO - Fetched 4 comments from issue #25
2025-08-13 06:52:06,338 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:52:06,338 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 06:52:06,338 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 06:52:06,338 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 06:52:06,338 - INFO - Generating results with timestamp: 2025-08-13 04:52:06 UTC
2025-08-13 06:52:06,338 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 04:52:06 UTC
2025-08-13 06:52:06,848 - INFO - Issue #26 state: open, locked: False
2025-08-13 06:52:07,668 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 04:52:06 UTC
2025-08-13 06:52:07,764 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:52:08,692 - INFO - Fetched 19 comments from issue #8
2025-08-13 06:52:08,693 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 06:52:08,693 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 06:52:08,693 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 06:52:08,693 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 06:52:08,693 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 06:52:08,694 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 06:52:08,694 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 06:52:08,694 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 06:52:08,694 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 06:52:08,694 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 06:52:08,694 - INFO - Generating results with timestamp: 2025-08-13 04:52:08 UTC
2025-08-13 06:52:08,694 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 04:52:08 UTC
2025-08-13 06:52:09,204 - INFO - Issue #13 state: open, locked: False
2025-08-13 06:52:10,330 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 04:52:08 UTC
2025-08-13 06:55:42,296 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:55:43,323 - INFO - Fetched 10 comments from issue #35
2025-08-13 06:55:43,324 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:55:43,324 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 06:55:43,324 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:55:43,324 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 06:55:43,324 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 06:55:43,324 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 06:55:43,324 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 06:55:43,324 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 06:55:43,324 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 06:55:43,324 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 06:55:43,325 - INFO - Generating results with timestamp: 2025-08-13 04:55:43 UTC
2025-08-13 06:55:43,325 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 04:55:43 UTC
2025-08-13 06:55:43,836 - INFO - Issue #36 state: open, locked: False
2025-08-13 06:55:44,552 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 04:55:43 UTC
2025-08-13 06:55:44,650 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:55:45,473 - INFO - Fetched 4 comments from issue #25
2025-08-13 06:55:45,474 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 06:55:45,474 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 06:55:45,474 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 06:55:45,474 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 06:55:45,474 - INFO - Generating results with timestamp: 2025-08-13 04:55:45 UTC
2025-08-13 06:55:45,475 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 04:55:45 UTC
2025-08-13 06:55:45,984 - INFO - Issue #26 state: open, locked: False
2025-08-13 06:55:47,011 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 04:55:45 UTC
2025-08-13 06:55:47,105 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 06:55:48,340 - INFO - Fetched 19 comments from issue #8
2025-08-13 06:55:48,340 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 06:55:48,341 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 06:55:48,341 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 06:55:48,341 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 06:55:48,341 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 06:55:48,342 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 06:55:48,342 - INFO - Generating results with timestamp: 2025-08-13 04:55:48 UTC
2025-08-13 06:55:48,342 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 04:55:48 UTC
2025-08-13 06:55:48,852 - INFO - Issue #13 state: open, locked: False
2025-08-13 06:55:49,876 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 04:55:48 UTC
2025-08-13 07:00:01,522 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 07:00:02,393 - INFO - Fetched 10 comments from issue #35
2025-08-13 07:00:02,393 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 07:00:02,394 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 07:00:02,394 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 07:00:02,394 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 07:00:02,394 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 07:00:02,394 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 07:00:02,394 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 07:00:02,394 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 07:00:02,394 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 07:00:02,394 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 07:00:02,394 - INFO - Generating results with timestamp: 2025-08-13 05:00:02 UTC
2025-08-13 07:00:02,394 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 05:00:02 UTC
2025-08-13 07:00:02,836 - INFO - Issue #36 state: open, locked: False
2025-08-13 07:00:03,520 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 05:00:02 UTC
2025-08-13 07:00:03,642 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 07:00:04,544 - INFO - Fetched 4 comments from issue #25
2025-08-13 07:00:04,544 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 07:00:04,544 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 07:00:04,545 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 07:00:04,545 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 07:00:04,545 - INFO - Generating results with timestamp: 2025-08-13 05:00:04 UTC
2025-08-13 07:00:04,545 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 05:00:04 UTC
2025-08-13 07:00:05,052 - INFO - Issue #26 state: open, locked: False
2025-08-13 07:00:06,077 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 05:00:04 UTC
2025-08-13 07:00:06,176 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 07:00:07,503 - INFO - Fetched 19 comments from issue #8
2025-08-13 07:00:07,504 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 07:00:07,504 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 07:00:07,504 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 07:00:07,504 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 07:00:07,504 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 07:00:07,505 - INFO - Generating results with timestamp: 2025-08-13 05:00:07 UTC
2025-08-13 07:00:07,505 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 05:00:07 UTC
2025-08-13 07:00:08,025 - INFO - Issue #13 state: open, locked: False
2025-08-13 07:00:08,944 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 05:00:07 UTC
2025-08-13 07:30:02,100 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 07:30:03,185 - INFO - Fetched 10 comments from issue #35
2025-08-13 07:30:03,186 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 07:30:03,186 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 07:30:03,186 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 07:30:03,186 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 07:30:03,186 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 07:30:03,186 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 07:30:03,186 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 07:30:03,186 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 07:30:03,186 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 07:30:03,186 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 07:30:03,187 - INFO - Generating results with timestamp: 2025-08-13 05:30:03 UTC
2025-08-13 07:30:03,187 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 05:30:03 UTC
2025-08-13 07:30:03,698 - INFO - Issue #36 state: open, locked: False
2025-08-13 07:30:04,824 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 05:30:03 UTC
2025-08-13 07:30:04,915 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 07:30:05,951 - INFO - Fetched 4 comments from issue #25
2025-08-13 07:30:05,951 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 07:30:05,952 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 07:30:05,952 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 07:30:05,952 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 07:30:05,952 - INFO - Generating results with timestamp: 2025-08-13 05:30:05 UTC
2025-08-13 07:30:05,952 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 05:30:05 UTC
2025-08-13 07:30:06,566 - INFO - Issue #26 state: open, locked: False
2025-08-13 07:30:07,692 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 05:30:05 UTC
2025-08-13 07:30:07,792 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 07:30:09,228 - INFO - Fetched 19 comments from issue #8
2025-08-13 07:30:09,229 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 07:30:09,229 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 07:30:09,229 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 07:30:09,229 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 07:30:09,229 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 07:30:09,230 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 07:30:09,230 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 07:30:09,230 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 07:30:09,230 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 07:30:09,230 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 07:30:09,230 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 07:30:09,230 - INFO - Generating results with timestamp: 2025-08-13 05:30:09 UTC
2025-08-13 07:30:09,230 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 05:30:09 UTC
2025-08-13 07:30:09,739 - INFO - Issue #13 state: open, locked: False
2025-08-13 07:30:10,559 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 05:30:09 UTC
2025-08-13 08:00:01,708 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 08:00:03,178 - INFO - Fetched 10 comments from issue #35
2025-08-13 08:00:03,179 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 08:00:03,179 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 08:00:03,179 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 08:00:03,179 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 08:00:03,179 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 08:00:03,179 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 08:00:03,179 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 08:00:03,179 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 08:00:03,179 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 08:00:03,180 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 08:00:03,180 - INFO - Generating results with timestamp: 2025-08-13 06:00:03 UTC
2025-08-13 08:00:03,180 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 06:00:03 UTC
2025-08-13 08:00:03,792 - INFO - Issue #36 state: open, locked: False
2025-08-13 08:00:04,816 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 06:00:03 UTC
2025-08-13 08:00:04,907 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 08:00:06,046 - INFO - Fetched 4 comments from issue #25
2025-08-13 08:00:06,047 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 08:00:06,047 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 08:00:06,047 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 08:00:06,047 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 08:00:06,048 - INFO - Generating results with timestamp: 2025-08-13 06:00:06 UTC
2025-08-13 08:00:06,048 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 06:00:06 UTC
2025-08-13 08:00:06,865 - INFO - Issue #26 state: open, locked: False
2025-08-13 08:00:08,093 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 06:00:06 UTC
2025-08-13 08:00:08,185 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 08:00:09,425 - INFO - Fetched 19 comments from issue #8
2025-08-13 08:00:09,426 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 08:00:09,426 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 08:00:09,426 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 08:00:09,426 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 08:00:09,426 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 08:00:09,426 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 08:00:09,426 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 08:00:09,426 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 08:00:09,426 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 08:00:09,427 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 08:00:09,427 - INFO - Generating results with timestamp: 2025-08-13 06:00:09 UTC
2025-08-13 08:00:09,427 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 06:00:09 UTC
2025-08-13 08:00:09,937 - INFO - Issue #13 state: open, locked: False
2025-08-13 08:00:10,961 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 06:00:09 UTC
2025-08-13 08:30:01,135 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 08:30:02,370 - INFO - Fetched 10 comments from issue #35
2025-08-13 08:30:02,371 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 08:30:02,371 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 08:30:02,371 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 08:30:02,371 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 08:30:02,371 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 08:30:02,371 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 08:30:02,371 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 08:30:02,371 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 08:30:02,371 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 08:30:02,371 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 08:30:02,372 - INFO - Generating results with timestamp: 2025-08-13 06:30:02 UTC
2025-08-13 08:30:02,372 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 06:30:02 UTC
2025-08-13 08:30:02,882 - INFO - Issue #36 state: open, locked: False
2025-08-13 08:30:04,008 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 06:30:02 UTC
2025-08-13 08:30:04,096 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 08:30:05,135 - INFO - Fetched 4 comments from issue #25
2025-08-13 08:30:05,135 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 08:30:05,135 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 08:30:05,135 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 08:30:05,136 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 08:30:05,136 - INFO - Generating results with timestamp: 2025-08-13 06:30:05 UTC
2025-08-13 08:30:05,136 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 06:30:05 UTC
2025-08-13 08:30:05,749 - INFO - Issue #26 state: open, locked: False
2025-08-13 08:30:06,692 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 06:30:05 UTC
2025-08-13 08:30:06,785 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 08:30:07,899 - INFO - Fetched 19 comments from issue #8
2025-08-13 08:30:07,900 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 08:30:07,900 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 08:30:07,900 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 08:30:07,900 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 08:30:07,900 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 08:30:07,901 - INFO - Generating results with timestamp: 2025-08-13 06:30:07 UTC
2025-08-13 08:30:07,901 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 06:30:07 UTC
2025-08-13 08:30:08,719 - INFO - Issue #13 state: open, locked: False
2025-08-13 08:30:09,743 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 06:30:07 UTC
2025-08-13 09:00:01,892 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 09:00:03,633 - INFO - Fetched 10 comments from issue #35
2025-08-13 09:00:03,634 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 09:00:03,634 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 09:00:03,634 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 09:00:03,635 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 09:00:03,635 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 09:00:03,635 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 09:00:03,635 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 09:00:03,635 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 09:00:03,635 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 09:00:03,635 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 09:00:03,635 - INFO - Generating results with timestamp: 2025-08-13 07:00:03 UTC
2025-08-13 09:00:03,635 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 07:00:03 UTC
2025-08-13 09:00:04,248 - INFO - Issue #36 state: open, locked: False
2025-08-13 09:00:05,681 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 07:00:03 UTC
2025-08-13 09:00:05,766 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 09:00:06,705 - INFO - Fetched 4 comments from issue #25
2025-08-13 09:00:06,706 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 09:00:06,706 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 09:00:06,706 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 09:00:06,706 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 09:00:06,707 - INFO - Generating results with timestamp: 2025-08-13 07:00:06 UTC
2025-08-13 09:00:06,707 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 07:00:06 UTC
2025-08-13 09:00:07,422 - INFO - Issue #26 state: open, locked: False
2025-08-13 09:00:09,163 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 07:00:06 UTC
2025-08-13 09:00:09,256 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 09:00:10,495 - INFO - Fetched 19 comments from issue #8
2025-08-13 09:00:10,495 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 09:00:10,496 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 09:00:10,496 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 09:00:10,496 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 09:00:10,496 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 09:00:10,497 - INFO - Generating results with timestamp: 2025-08-13 07:00:10 UTC
2025-08-13 09:00:10,497 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 07:00:10 UTC
2025-08-13 09:00:11,006 - INFO - Issue #13 state: open, locked: False
2025-08-13 09:00:12,030 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 07:00:10 UTC
2025-08-13 09:30:01,176 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 09:30:02,669 - INFO - Fetched 10 comments from issue #35
2025-08-13 09:30:02,670 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 09:30:02,670 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 09:30:02,670 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 09:30:02,670 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 09:30:02,670 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 09:30:02,670 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 09:30:02,671 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 09:30:02,671 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 09:30:02,671 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 09:30:02,671 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 09:30:02,671 - INFO - Generating results with timestamp: 2025-08-13 07:30:02 UTC
2025-08-13 09:30:02,671 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 07:30:02 UTC
2025-08-13 09:30:03,284 - INFO - Issue #36 state: open, locked: False
2025-08-13 09:30:04,307 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 07:30:02 UTC
2025-08-13 09:30:04,397 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 09:30:05,844 - INFO - Fetched 4 comments from issue #25
2025-08-13 09:30:05,845 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 09:30:05,845 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 09:30:05,845 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 09:30:05,845 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 09:30:05,845 - INFO - Generating results with timestamp: 2025-08-13 07:30:05 UTC
2025-08-13 09:30:05,845 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 07:30:05 UTC
2025-08-13 09:30:06,355 - INFO - Issue #26 state: open, locked: False
2025-08-13 09:30:07,584 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 07:30:05 UTC
2025-08-13 09:30:07,672 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 09:30:09,223 - INFO - Fetched 19 comments from issue #8
2025-08-13 09:30:09,224 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 09:30:09,224 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 09:30:09,225 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 09:30:09,225 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 09:30:09,225 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 09:30:09,225 - INFO - Generating results with timestamp: 2025-08-13 07:30:09 UTC
2025-08-13 09:30:09,226 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 07:30:09 UTC
2025-08-13 09:30:10,042 - INFO - Issue #13 state: open, locked: False
2025-08-13 09:30:11,476 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 07:30:09 UTC
2025-08-13 10:00:01,627 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 10:00:03,115 - INFO - Fetched 10 comments from issue #35
2025-08-13 10:00:03,116 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 10:00:03,116 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 10:00:03,116 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 10:00:03,116 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 10:00:03,116 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 10:00:03,116 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 10:00:03,116 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 10:00:03,116 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 10:00:03,116 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 10:00:03,116 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 10:00:03,117 - INFO - Generating results with timestamp: 2025-08-13 08:00:03 UTC
2025-08-13 10:00:03,117 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 08:00:03 UTC
2025-08-13 10:00:03,730 - INFO - Issue #36 state: open, locked: False
2025-08-13 10:00:04,958 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 08:00:03 UTC
2025-08-13 10:00:05,048 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 10:00:06,085 - INFO - Fetched 4 comments from issue #25
2025-08-13 10:00:06,086 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 10:00:06,086 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 10:00:06,086 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 10:00:06,086 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 10:00:06,086 - INFO - Generating results with timestamp: 2025-08-13 08:00:06 UTC
2025-08-13 10:00:06,087 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 08:00:06 UTC
2025-08-13 10:00:07,007 - INFO - Issue #26 state: open, locked: False
2025-08-13 10:00:08,030 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 08:00:06 UTC
2025-08-13 10:00:08,120 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 10:00:09,771 - INFO - Fetched 19 comments from issue #8
2025-08-13 10:00:09,772 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 10:00:09,772 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 10:00:09,772 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 10:00:09,772 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 10:00:09,772 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 10:00:09,772 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 10:00:09,772 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 10:00:09,772 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 10:00:09,772 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 10:00:09,772 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 10:00:09,772 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 10:00:09,772 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 10:00:09,773 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 10:00:09,773 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 10:00:09,773 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 10:00:09,773 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 10:00:09,773 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 10:00:09,773 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 10:00:09,773 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 10:00:09,773 - INFO - Generating results with timestamp: 2025-08-13 08:00:09 UTC
2025-08-13 10:00:09,773 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 08:00:09 UTC
2025-08-13 10:00:10,489 - INFO - Issue #13 state: open, locked: False
2025-08-13 10:00:11,512 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 08:00:09 UTC
2025-08-13 10:30:01,675 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 10:30:03,363 - INFO - Fetched 10 comments from issue #35
2025-08-13 10:30:03,364 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 10:30:03,364 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 10:30:03,364 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 10:30:03,364 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 10:30:03,364 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 10:30:03,364 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 10:30:03,364 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 10:30:03,364 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 10:30:03,364 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 10:30:03,364 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 10:30:03,365 - INFO - Generating results with timestamp: 2025-08-13 08:30:03 UTC
2025-08-13 10:30:03,365 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 08:30:03 UTC
2025-08-13 10:30:03,874 - INFO - Issue #36 state: open, locked: False
2025-08-13 10:30:04,796 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 08:30:03 UTC
2025-08-13 10:30:04,886 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 10:30:05,923 - INFO - Fetched 4 comments from issue #25
2025-08-13 10:30:05,925 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 10:30:05,925 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 10:30:05,925 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 10:30:05,925 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 10:30:05,925 - INFO - Generating results with timestamp: 2025-08-13 08:30:05 UTC
2025-08-13 10:30:05,926 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 08:30:05 UTC
2025-08-13 10:30:06,434 - INFO - Issue #26 state: open, locked: False
2025-08-13 10:30:07,356 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 08:30:05 UTC
2025-08-13 10:30:07,458 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 10:30:08,588 - INFO - Fetched 19 comments from issue #8
2025-08-13 10:30:08,588 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 10:30:08,588 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 10:30:08,589 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 10:30:08,589 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 10:30:08,589 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 10:30:08,589 - INFO - Generating results with timestamp: 2025-08-13 08:30:08 UTC
2025-08-13 10:30:08,590 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 08:30:08 UTC
2025-08-13 10:30:09,302 - INFO - Issue #13 state: open, locked: False
2025-08-13 10:30:10,325 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 08:30:08 UTC
2025-08-13 11:00:01,466 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 11:00:02,995 - INFO - Fetched 10 comments from issue #35
2025-08-13 11:00:02,996 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 11:00:02,996 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 11:00:02,996 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 11:00:02,996 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 11:00:02,996 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 11:00:02,996 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 11:00:02,996 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 11:00:02,996 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 11:00:02,997 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 11:00:02,997 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 11:00:02,997 - INFO - Generating results with timestamp: 2025-08-13 09:00:02 UTC
2025-08-13 11:00:02,997 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 09:00:02 UTC
2025-08-13 11:00:03,610 - INFO - Issue #36 state: open, locked: False
2025-08-13 11:00:04,634 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 09:00:02 UTC
2025-08-13 11:00:04,719 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 11:00:05,761 - INFO - Fetched 4 comments from issue #25
2025-08-13 11:00:05,761 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 11:00:05,762 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 11:00:05,762 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 11:00:05,762 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 11:00:05,762 - INFO - Generating results with timestamp: 2025-08-13 09:00:05 UTC
2025-08-13 11:00:05,762 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 09:00:05 UTC
2025-08-13 11:00:06,272 - INFO - Issue #26 state: open, locked: False
2025-08-13 11:00:07,399 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 09:00:05 UTC
2025-08-13 11:00:07,498 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 11:00:08,627 - INFO - Fetched 19 comments from issue #8
2025-08-13 11:00:08,628 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 11:00:08,628 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 11:00:08,628 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 11:00:08,628 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 11:00:08,628 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 11:00:08,628 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 11:00:08,628 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 11:00:08,629 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 11:00:08,629 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 11:00:08,629 - INFO - Generating results with timestamp: 2025-08-13 09:00:08 UTC
2025-08-13 11:00:08,629 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 09:00:08 UTC
2025-08-13 11:00:09,345 - INFO - Issue #13 state: open, locked: False
2025-08-13 11:00:10,778 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 09:00:08 UTC
2025-08-13 11:30:01,935 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 11:30:03,532 - INFO - Fetched 10 comments from issue #35
2025-08-13 11:30:03,533 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 11:30:03,533 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 11:30:03,533 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 11:30:03,533 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 11:30:03,533 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 11:30:03,534 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 11:30:03,534 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 11:30:03,534 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 11:30:03,534 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 11:30:03,534 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 11:30:03,534 - INFO - Generating results with timestamp: 2025-08-13 09:30:03 UTC
2025-08-13 11:30:03,534 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 09:30:03 UTC
2025-08-13 11:30:04,455 - INFO - Issue #36 state: open, locked: False
2025-08-13 11:30:05,478 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 09:30:03 UTC
2025-08-13 11:30:05,566 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 11:30:06,706 - INFO - Fetched 4 comments from issue #25
2025-08-13 11:30:06,707 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 11:30:06,707 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 11:30:06,707 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 11:30:06,707 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 11:30:06,707 - INFO - Generating results with timestamp: 2025-08-13 09:30:06 UTC
2025-08-13 11:30:06,707 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 09:30:06 UTC
2025-08-13 11:30:07,321 - INFO - Issue #26 state: open, locked: False
2025-08-13 11:30:08,550 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 09:30:06 UTC
2025-08-13 11:30:08,642 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 11:30:09,882 - INFO - Fetched 19 comments from issue #8
2025-08-13 11:30:09,882 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 11:30:09,883 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 11:30:09,883 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 11:30:09,883 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 11:30:09,883 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 11:30:09,884 - INFO - Generating results with timestamp: 2025-08-13 09:30:09 UTC
2025-08-13 11:30:09,884 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 09:30:09 UTC
2025-08-13 11:30:10,393 - INFO - Issue #13 state: open, locked: False
2025-08-13 11:30:11,418 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 09:30:09 UTC
2025-08-13 12:00:01,575 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 12:00:03,178 - INFO - Fetched 10 comments from issue #35
2025-08-13 12:00:03,179 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 12:00:03,179 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 12:00:03,179 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 12:00:03,179 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 12:00:03,179 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 12:00:03,179 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 12:00:03,179 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 12:00:03,179 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 12:00:03,179 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 12:00:03,180 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 12:00:03,180 - INFO - Generating results with timestamp: 2025-08-13 10:00:03 UTC
2025-08-13 12:00:03,180 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 10:00:03 UTC
2025-08-13 12:00:03,998 - INFO - Issue #36 state: open, locked: False
2025-08-13 12:00:05,022 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 10:00:03 UTC
2025-08-13 12:00:05,111 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 12:00:06,454 - INFO - Fetched 4 comments from issue #25
2025-08-13 12:00:06,455 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 12:00:06,455 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 12:00:06,455 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 12:00:06,455 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 12:00:06,455 - INFO - Generating results with timestamp: 2025-08-13 10:00:06 UTC
2025-08-13 12:00:06,456 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 10:00:06 UTC
2025-08-13 12:00:07,172 - INFO - Issue #26 state: open, locked: False
2025-08-13 12:00:08,503 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 10:00:06 UTC
2025-08-13 12:00:08,595 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 12:00:09,732 - INFO - Fetched 19 comments from issue #8
2025-08-13 12:00:09,733 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 12:00:09,733 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 12:00:09,733 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 12:00:09,733 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 12:00:09,733 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 12:00:09,733 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 12:00:09,733 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 12:00:09,733 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 12:00:09,733 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 12:00:09,733 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 12:00:09,733 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 12:00:09,734 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 12:00:09,734 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 12:00:09,734 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 12:00:09,734 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 12:00:09,734 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 12:00:09,734 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 12:00:09,734 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 12:00:09,734 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 12:00:09,734 - INFO - Generating results with timestamp: 2025-08-13 10:00:09 UTC
2025-08-13 12:00:09,734 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 10:00:09 UTC
2025-08-13 12:00:10,756 - INFO - Issue #13 state: open, locked: False
2025-08-13 12:00:11,901 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 10:00:09 UTC
2025-08-13 12:30:02,057 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 12:30:03,456 - INFO - Fetched 10 comments from issue #35
2025-08-13 12:30:03,457 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 12:30:03,457 - WARNING - Invalid vote format in comment by fredvs: Vote Logo:***
2025-08-13 12:30:03,457 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 12:30:03,457 - INFO - Counted vote for Logo 78 by fredvs
2025-08-13 12:30:03,457 - WARNING - Duplicate vote for Logo 102 by fredvs ignored
2025-08-13 12:30:03,457 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 12:30:03,457 - WARNING - Invalid logo number 130 by fredvs
2025-08-13 12:30:03,457 - WARNING - Invalid logo number 138 by fredvs
2025-08-13 12:30:03,457 - WARNING - Invalid vote format in comment by fredvs: Blablablab***
2025-08-13 12:30:03,458 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 127
2025-08-13 12:30:03,458 - INFO - Generating results with timestamp: 2025-08-13 10:30:03 UTC
2025-08-13 12:30:03,458 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 10:30:03 UTC
2025-08-13 12:30:03,968 - INFO - Issue #36 state: open, locked: False
2025-08-13 12:30:05,196 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/36 with timestamp: 2025-08-13 10:30:03 UTC
2025-08-13 12:30:05,287 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 12:30:06,732 - INFO - Fetched 4 comments from issue #25
2025-08-13 12:30:06,733 - INFO - Counted vote for Logo 102 by fredvs
2025-08-13 12:30:06,733 - INFO - Counted vote for Logo 104 by fredvs
2025-08-13 12:30:06,733 - INFO - Counted vote for Logo 19 by fredvs
2025-08-13 12:30:06,733 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 12:30:06,734 - INFO - Generating results with timestamp: 2025-08-13 10:30:06 UTC
2025-08-13 12:30:06,734 - INFO - Attempting to update issue #26 with timestamp: 2025-08-13 10:30:06 UTC
2025-08-13 12:30:07,243 - INFO - Issue #26 state: open, locked: False
2025-08-13 12:30:08,268 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/26 with timestamp: 2025-08-13 10:30:06 UTC
2025-08-13 12:30:08,374 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 12:30:09,702 - INFO - Fetched 19 comments from issue #8
2025-08-13 12:30:09,703 - INFO - Counted vote for Logo 57 by fredvs
2025-08-13 12:30:09,703 - INFO - Counted vote for Logo 56 by fredvs
2025-08-13 12:30:09,703 - WARNING - Invalid vote format in comment by fredvs: blabla
2025-08-13 12:30:09,703 - INFO - Counted vote for Logo 17 by fredvs
2025-08-13 12:30:09,703 - WARNING - Invalid vote format in comment by callmetango: @fredvs Th***
2025-08-13 12:30:09,703 - WARNING - Invalid vote format in comment by fredvs: >Everybody***
2025-08-13 12:30:09,703 - WARNING - Invalid vote format in comment by callmetango: Yes, I am ***
2025-08-13 12:30:09,703 - WARNING - Invalid vote format in comment by fredvs: Like [this***
2025-08-13 12:30:09,703 - INFO - Counted vote for Logo 69 by xcrsz
2025-08-13 12:30:09,703 - WARNING - Invalid vote format in comment by callmetango: @xcrsz
> V***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by callmetango: > Like [th***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by fredvs: > > Like [***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by fredvs: Here explo***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by xgui4: can we do ***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by fredvs: > can we d***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by fredvs: Note that ***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by xgui4: > Note tha***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by fredvs: >is that p***
2025-08-13 12:30:09,704 - WARNING - Invalid vote format in comment by fredvs: For testin***
2025-08-13 12:30:09,704 - INFO - Generating results with timestamp: 2025-08-13 10:30:09 UTC
2025-08-13 12:30:09,704 - INFO - Attempting to update issue #13 with timestamp: 2025-08-13 10:30:09 UTC
2025-08-13 12:30:10,316 - INFO - Issue #13 state: open, locked: False
2025-08-13 12:30:11,339 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/13 with timestamp: 2025-08-13 10:30:09 UTC
2025-08-13 19:42:28,178 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 19:42:28,628 - ERROR - Failed to fetch comments: 404 Not Found
2025-08-13 19:42:28,630 - INFO - Generating results with timestamp: 2025-08-13 17:42:28 UTC
2025-08-13 19:42:28,630 - INFO - Attempting to update issue #36 with timestamp: 2025-08-13 17:42:28 UTC
2025-08-13 19:42:29,103 - ERROR - Cannot access issue #36: 410 This issue was deleted
2025-08-13 19:44:17,602 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 19:44:18,673 - INFO - Fetched 0 comments from issue #63
2025-08-13 19:44:18,674 - INFO - Generating results with timestamp: 2025-08-13 17:44:18 UTC
2025-08-13 19:44:18,674 - INFO - Creating new results issue with timestamp: 2025-08-13 17:44:18 UTC
2025-08-13 19:44:19,697 - INFO - Created results issue: https://github.com/fredvs/test/issues/65
2025-08-13 19:44:19,697 - INFO - Set RESULTS_ISSUE_NUMBER = 65 in create_poll_issue_xlibre.py
2025-08-13 19:46:18,324 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 19:46:18,890 - INFO - Fetched 0 comments from issue #63
2025-08-13 19:46:18,891 - INFO - Generating results with timestamp: 2025-08-13 17:46:18 UTC
2025-08-13 19:46:18,892 - INFO - Creating new results issue with timestamp: 2025-08-13 17:46:18 UTC
2025-08-13 19:46:19,916 - INFO - Created results issue: https://github.com/fredvs/test/issues/66
2025-08-13 19:46:19,916 - INFO - Set RESULTS_ISSUE_NUMBER = 66 in create_poll_issue_xlibre.py
2025-08-13 19:49:53,675 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 19:49:54,546 - INFO - Fetched 0 comments from issue #63
2025-08-13 19:49:54,547 - INFO - Generating results with timestamp: 2025-08-13 17:49:54 UTC
2025-08-13 19:49:54,547 - INFO - Attempting to update issue #65 with timestamp: 2025-08-13 17:49:54 UTC
2025-08-13 19:49:55,058 - INFO - Issue #65 state: open, locked: False
2025-08-13 19:49:55,980 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/65 with timestamp: 2025-08-13 17:49:54 UTC
2025-08-13 19:54:27,916 - INFO - Parsed 124 logos from /home/fred/xlibre_logo/logo_formats.txt
2025-08-13 19:54:29,595 - INFO - Fetched 5 comments from issue #63
2025-08-13 19:54:29,595 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 19:54:29,595 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 19:54:29,595 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 19:54:29,596 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 100
2025-08-13 19:54:29,596 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 19:54:29,596 - INFO - Generating results with timestamp: 2025-08-13 17:54:29 UTC
2025-08-13 19:54:29,596 - INFO - Attempting to update issue #65 with timestamp: 2025-08-13 17:54:29 UTC
2025-08-13 19:54:30,209 - INFO - Issue #65 state: open, locked: False
2025-08-13 19:54:31,028 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/65 with timestamp: 2025-08-13 17:54:29 UTC
2025-08-13 20:02:14,074 - ERROR - Error fetching logos: name 'os' is not defined
2025-08-13 20:02:14,075 - ERROR - No valid logos found, exiting
2025-08-13 20:04:08,044 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:04:09,168 - INFO - Fetched 5 comments from issue #63
2025-08-13 20:04:09,168 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 20:04:09,169 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 20:04:09,169 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 20:04:09,169 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 100
2025-08-13 20:04:09,169 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 20:04:09,169 - INFO - Generating results with timestamp: 2025-08-13 20:04:09 
2025-08-13 20:04:09,169 - INFO - Attempting to update issue #65 with timestamp: 2025-08-13 20:04:09 
2025-08-13 20:04:10,310 - INFO - Issue #65 state: open, locked: False
2025-08-13 20:04:11,334 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/65 with timestamp: 2025-08-13 20:04:09 
2025-08-13 20:14:34,115 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:14:35,137 - INFO - Fetched 5 comments from issue #63
2025-08-13 20:14:35,138 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 20:14:35,138 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 20:14:35,138 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 20:14:35,138 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 100
2025-08-13 20:14:35,138 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 20:14:35,138 - INFO - Generating results with timestamp: 2025-08-13 20:14:35 
2025-08-13 20:14:35,139 - INFO - Attempting to update issue #65 with timestamp: 2025-08-13 20:14:35 
2025-08-13 20:14:35,647 - INFO - Issue #65 state: open, locked: False
2025-08-13 20:14:36,467 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/65 with timestamp: 2025-08-13 20:14:35 
2025-08-13 20:20:38,863 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:20:39,986 - INFO - Fetched 5 comments from issue #63
2025-08-13 20:20:39,986 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 20:20:39,986 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 20:20:39,986 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 20:20:39,986 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 100
2025-08-13 20:20:39,986 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 20:20:39,986 - INFO - Generating results with timestamp: 2025-08-13 20:20:39 
2025-08-13 20:20:39,986 - INFO - Attempting to update issue #65 with timestamp: 2025-08-13 20:20:39 
2025-08-13 20:20:40,441 - INFO - Issue #65 state: open, locked: False
2025-08-13 20:20:41,419 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/65 with timestamp: 2025-08-13 20:20:39 
2025-08-13 20:28:32,669 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:28:33,083 - INFO - Fetched 0 comments from issue #64
2025-08-13 20:28:33,084 - INFO - Generating results with timestamp: 2025-08-13 20:28:33 
2025-08-13 20:28:33,084 - INFO - Attempting to update issue #66 with timestamp: 2025-08-13 20:28:33 
2025-08-13 20:28:33,586 - ERROR - Cannot access issue #66: 410 This issue was deleted
2025-08-13 20:29:05,335 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:29:05,788 - INFO - Fetched 0 comments from issue #64
2025-08-13 20:29:05,789 - INFO - Generating results with timestamp: 2025-08-13 20:29:05 
2025-08-13 20:29:05,789 - INFO - Creating new results issue with timestamp: 2025-08-13 20:29:05 
2025-08-13 20:29:06,457 - INFO - Created results issue: https://github.com/fredvs/test/issues/67
2025-08-13 20:29:06,457 - INFO - Set RESULTS_ISSUE_NUMBER = 67 in your script
2025-08-13 20:35:28,939 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:35:29,345 - INFO - Fetched 0 comments from issue #62
2025-08-13 20:35:29,346 - INFO - Generating results with timestamp: 2025-08-13 20:35:29 
2025-08-13 20:35:29,346 - INFO - Creating new results issue with timestamp: 2025-08-13 20:35:29 
2025-08-13 20:35:30,057 - INFO - Created results issue: https://github.com/fredvs/test/issues/68
2025-08-13 20:35:30,057 - INFO - Set RESULTS_ISSUE_NUMBER = 68 in your script
2025-08-13 20:35:52,690 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:35:53,199 - INFO - Fetched 0 comments from issue #62
2025-08-13 20:35:53,200 - INFO - Generating results with timestamp: 2025-08-13 20:35:53 
2025-08-13 20:35:53,200 - INFO - Creating new results issue with timestamp: 2025-08-13 20:35:53 
2025-08-13 20:35:54,019 - INFO - Created results issue: https://github.com/fredvs/test/issues/69
2025-08-13 20:35:54,020 - INFO - Set RESULTS_ISSUE_NUMBER = 69 in your script
2025-08-13 20:39:00,496 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:39:01,003 - INFO - Fetched 0 comments from issue #62
2025-08-13 20:39:01,004 - INFO - Generating results with timestamp: 2025-08-13 20:39:01 
2025-08-13 20:39:01,004 - INFO - Attempting to update issue #69 with timestamp: 2025-08-13 20:39:01 
2025-08-13 20:39:01,722 - INFO - Issue #69 state: open, locked: False
2025-08-13 20:39:02,847 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/69 with timestamp: 2025-08-13 20:39:01 
2025-08-13 20:43:44,557 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:43:45,065 - INFO - Fetched 0 comments from issue #61
2025-08-13 20:43:45,066 - INFO - Generating results with timestamp: 2025-08-13 20:43:45 
2025-08-13 20:43:45,066 - INFO - Creating new results issue with timestamp: 2025-08-13 20:43:45 
2025-08-13 20:43:46,090 - INFO - Created results issue: https://github.com/fredvs/test/issues/70
2025-08-13 20:43:46,090 - INFO - Set RESULTS_ISSUE_NUMBER = 70 in your script
2025-08-13 20:58:18,958 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:58:20,182 - INFO - Fetched 5 comments from issue #64
2025-08-13 20:58:20,183 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 20:58:20,183 - INFO - Counted vote for Logo 66 by fredvs
2025-08-13 20:58:20,183 - INFO - Counted vote for Logo 33 by fredvs
2025-08-13 20:58:20,183 - WARNING - Invalid vote format in comment by fredvs: Blablablablabla
2025-08-13 20:58:20,184 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 20:58:20,184 - INFO - Generating results with timestamp: 2025-08-13 20:58:20 
2025-08-13 20:58:20,184 - INFO - Attempting to update issue #67 with timestamp: 2025-08-13 20:58:20 
2025-08-13 20:58:20,797 - INFO - Issue #67 state: open, locked: False
2025-08-13 20:58:21,822 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/67 with timestamp: 2025-08-13 20:58:20 
2025-08-13 20:59:52,757 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 20:59:53,981 - INFO - Fetched 5 comments from issue #64
2025-08-13 20:59:53,982 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 20:59:53,982 - INFO - Counted vote for Logo 66 by fredvs
2025-08-13 20:59:53,982 - INFO - Counted vote for Logo 33 by fredvs
2025-08-13 20:59:53,983 - WARNING - Invalid vote format in comment by fredvs: Blablablablabla
2025-08-13 20:59:53,983 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 20:59:53,983 - INFO - Generating results with timestamp: 2025-08-13 20:59:53 
2025-08-13 20:59:53,983 - INFO - Attempting to update issue #67 with timestamp: 2025-08-13 20:59:53 
2025-08-13 20:59:54,493 - INFO - Issue #67 state: open, locked: False
2025-08-13 20:59:55,620 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/67 with timestamp: 2025-08-13 20:59:53 
2025-08-13 21:14:21,256 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 21:14:21,764 - INFO - Fetched 0 comments from issue #61
2025-08-13 21:14:21,765 - INFO - Generating results with timestamp: 2025-08-13 21:14:21 
2025-08-13 21:14:21,765 - INFO - Creating new results issue with timestamp: 2025-08-13 21:14:21 
2025-08-13 21:14:22,445 - INFO - Created results issue: https://github.com/fredvs/test/issues/73
2025-08-13 21:14:22,445 - INFO - Set RESULTS_ISSUE_NUMBER = 73 in your script
2025-08-13 21:18:12,690 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 21:18:13,608 - INFO - Fetched 5 comments from issue #64
2025-08-13 21:18:13,609 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 21:18:13,609 - INFO - Counted vote for Logo 66 by fredvs
2025-08-13 21:18:13,609 - INFO - Counted vote for Logo 33 by fredvs
2025-08-13 21:18:13,609 - WARNING - Invalid vote format in comment by fredvs: Blablablablabla
2025-08-13 21:18:13,609 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 21:18:13,609 - INFO - Generating results with timestamp: 2025-08-13 21:18:13 
2025-08-13 21:18:13,609 - INFO - Creating new results issue with timestamp: 2025-08-13 21:18:13 
2025-08-13 21:18:14,427 - INFO - Created results issue: https://github.com/fredvs/test/issues/74
2025-08-13 21:18:14,427 - INFO - Set RESULTS_ISSUE_NUMBER = 74 in your script
2025-08-13 21:23:07,817 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 21:23:08,324 - INFO - Fetched 0 comments from issue #62
2025-08-13 21:23:08,325 - INFO - Generating results with timestamp: 2025-08-13 21:23:08 
2025-08-13 21:23:08,325 - INFO - Creating new results issue with timestamp: 2025-08-13 21:23:08 
2025-08-13 21:23:09,349 - INFO - Created results issue: https://github.com/fredvs/test/issues/75
2025-08-13 21:23:09,349 - INFO - Set RESULTS_ISSUE_NUMBER = 75 in your script
2025-08-13 21:25:43,878 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 21:25:44,796 - INFO - Fetched 5 comments from issue #63
2025-08-13 21:25:44,797 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 21:25:44,797 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 21:25:44,797 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 21:25:44,797 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 100
2025-08-13 21:25:44,797 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 21:25:44,797 - INFO - Generating results with timestamp: 2025-08-13 21:25:44 
2025-08-13 21:25:44,797 - INFO - Creating new results issue with timestamp: 2025-08-13 21:25:44 
2025-08-13 21:25:45,820 - INFO - Created results issue: https://github.com/fredvs/test/issues/76
2025-08-13 21:25:45,820 - INFO - Set RESULTS_ISSUE_NUMBER = 76 in your script
2025-08-13 21:27:15,120 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 21:27:16,037 - INFO - Fetched 5 comments from issue #63
2025-08-13 21:27:16,038 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 21:27:16,038 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 21:27:16,038 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 21:27:16,038 - INFO - Counted vote for Logo 100 by fredvs
2025-08-13 21:27:16,038 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 21:27:16,038 - INFO - Generating results with timestamp: 2025-08-13 21:27:16 
2025-08-13 21:27:16,039 - INFO - Creating new results issue with timestamp: 2025-08-13 21:27:16 
2025-08-13 21:27:16,960 - INFO - Created results issue: https://github.com/fredvs/test/issues/77
2025-08-13 21:27:16,960 - INFO - Set RESULTS_ISSUE_NUMBER = 77 in your script
2025-08-13 21:29:16,672 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 21:29:17,692 - INFO - Fetched 5 comments from issue #63
2025-08-13 21:29:17,693 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 21:29:17,693 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 21:29:17,693 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 21:29:17,693 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 100
2025-08-13 21:29:17,693 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 21:29:17,693 - INFO - Generating results with timestamp: 2025-08-13 21:29:17 
2025-08-13 21:29:17,693 - INFO - Attempting to update issue #76 with timestamp: 2025-08-13 21:29:17 
2025-08-13 21:29:18,204 - INFO - Issue #76 state: open, locked: False
2025-08-13 21:29:19,227 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/76 with timestamp: 2025-08-13 21:29:17 
2025-08-13 21:30:37,365 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 21:30:38,590 - INFO - Fetched 5 comments from issue #63
2025-08-13 21:30:38,590 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 21:30:38,590 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 21:30:38,591 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 21:30:38,591 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 100
2025-08-13 21:30:38,591 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 21:30:38,591 - INFO - Generating results with timestamp: 2025-08-13 21:30:38 
2025-08-13 21:30:38,591 - INFO - Attempting to update issue #76 with timestamp: 2025-08-13 21:30:38 
2025-08-13 21:30:39,512 - INFO - Issue #76 state: open, locked: False
2025-08-13 21:30:40,938 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/76 with timestamp: 2025-08-13 21:30:38 
2025-08-13 21:40:57,893 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 21:40:58,812 - INFO - Fetched 5 comments from issue #64
2025-08-13 21:40:58,813 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 21:40:58,813 - INFO - Counted vote for Logo 66 by fredvs
2025-08-13 21:40:58,813 - INFO - Counted vote for Logo 33 by fredvs
2025-08-13 21:40:58,813 - WARNING - Invalid vote format in comment by fredvs: Blablablablabla
2025-08-13 21:40:58,813 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 21:40:58,813 - INFO - Generating results with timestamp: 2025-08-13 21:40:58 
2025-08-13 21:40:58,814 - INFO - Attempting to update issue #77 with timestamp: 2025-08-13 21:40:58 
2025-08-13 21:40:59,323 - INFO - Issue #77 state: open, locked: False
2025-08-13 21:41:00,246 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/77 with timestamp: 2025-08-13 21:40:58 
2025-08-13 22:06:52,157 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 22:06:53,074 - INFO - Fetched 5 comments from issue #64
2025-08-13 22:06:53,075 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 22:06:53,075 - INFO - Counted vote for Logo 66 by fredvs
2025-08-13 22:06:53,076 - INFO - Counted vote for Logo 33 by fredvs
2025-08-13 22:06:53,076 - WARNING - Invalid vote format in comment by fredvs: Blablablablabla
2025-08-13 22:06:53,076 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 22:06:53,076 - INFO - Generating results with timestamp: 2025-08-13 22:06:53 
2025-08-13 22:06:53,076 - INFO - Attempting to update issue #77 with timestamp: 2025-08-13 22:06:53 
2025-08-13 22:06:53,587 - INFO - Issue #77 state: open, locked: False
2025-08-13 22:06:54,406 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/77 with timestamp: 2025-08-13 22:06:53 
2025-08-13 22:11:10,202 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 22:11:11,223 - INFO - Fetched 5 comments from issue #63
2025-08-13 22:11:11,224 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 22:11:11,224 - INFO - Counted vote for Logo 98 by fredvs
2025-08-13 22:11:11,224 - INFO - Counted vote for Logo 30 by fredvs
2025-08-13 22:11:11,224 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 100
2025-08-13 22:11:11,224 - WARNING - Invalid vote format in comment by fredvs: Blablablabla
2025-08-13 22:11:11,224 - INFO - Generating results with timestamp: 2025-08-13 22:11:11 
2025-08-13 22:11:11,224 - INFO - Attempting to update issue #76 with timestamp: 2025-08-13 22:11:11 
2025-08-13 22:11:11,734 - INFO - Issue #76 state: open, locked: False
2025-08-13 22:11:13,067 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/76 with timestamp: 2025-08-13 22:11:11 
2025-08-13 22:11:19,214 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 22:11:19,722 - INFO - Fetched 0 comments from issue #62
2025-08-13 22:11:19,723 - INFO - Generating results with timestamp: 2025-08-13 22:11:19 
2025-08-13 22:11:19,723 - INFO - Attempting to update issue #75 with timestamp: 2025-08-13 22:11:19 
2025-08-13 22:11:20,234 - INFO - Issue #75 state: open, locked: False
2025-08-13 22:11:21,259 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/75 with timestamp: 2025-08-13 22:11:19 
2025-08-13 22:11:27,227 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 22:11:27,708 - INFO - Fetched 0 comments from issue #61
2025-08-13 22:11:27,709 - INFO - Generating results with timestamp: 2025-08-13 22:11:27 
2025-08-13 22:11:27,709 - INFO - Attempting to update issue #73 with timestamp: 2025-08-13 22:11:27 
2025-08-13 22:11:28,325 - INFO - Issue #73 state: open, locked: False
2025-08-13 22:11:29,655 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/73 with timestamp: 2025-08-13 22:11:27 
2025-08-13 22:11:36,008 - INFO - Fetched 147 logos from https://api.github.com/repos/fredvs/test/contents/logos
2025-08-13 22:11:37,029 - INFO - Fetched 5 comments from issue #64
2025-08-13 22:11:37,029 - INFO - Counted vote for Logo 3 by fredvs
2025-08-13 22:11:37,030 - INFO - Counted vote for Logo 66 by fredvs
2025-08-13 22:11:37,030 - INFO - Counted vote for Logo 33 by fredvs
2025-08-13 22:11:37,030 - WARNING - Invalid vote format in comment by fredvs: Blablablablabla
2025-08-13 22:11:37,030 - WARNING - User fredvs exceeded 3 votes, ignoring vote for Logo 1
2025-08-13 22:11:37,030 - INFO - Generating results with timestamp: 2025-08-13 22:11:37 
2025-08-13 22:11:37,030 - INFO - Attempting to update issue #77 with timestamp: 2025-08-13 22:11:37 
2025-08-13 22:11:37,643 - INFO - Issue #77 state: open, locked: False
2025-08-13 22:11:38,468 - INFO - Successfully updated results issue: https://github.com/fredvs/test/issues/77 with timestamp: 2025-08-13 22:11:37 
